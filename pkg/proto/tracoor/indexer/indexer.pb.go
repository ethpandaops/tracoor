// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: indexer/indexer.proto

package indexer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListUniqueExecutionBlockTraceValuesRequest_Field int32

const (
	ListUniqueExecutionBlockTraceValuesRequest_NODE                     ListUniqueExecutionBlockTraceValuesRequest_Field = 0
	ListUniqueExecutionBlockTraceValuesRequest_BLOCK_HASH               ListUniqueExecutionBlockTraceValuesRequest_Field = 1
	ListUniqueExecutionBlockTraceValuesRequest_BLOCK_NUMBER             ListUniqueExecutionBlockTraceValuesRequest_Field = 2
	ListUniqueExecutionBlockTraceValuesRequest_LOCATION                 ListUniqueExecutionBlockTraceValuesRequest_Field = 3
	ListUniqueExecutionBlockTraceValuesRequest_NETWORK                  ListUniqueExecutionBlockTraceValuesRequest_Field = 4
	ListUniqueExecutionBlockTraceValuesRequest_EXECUTION_IMPLEMENTATION ListUniqueExecutionBlockTraceValuesRequest_Field = 5
	ListUniqueExecutionBlockTraceValuesRequest_NODE_VERSION             ListUniqueExecutionBlockTraceValuesRequest_Field = 6
	ListUniqueExecutionBlockTraceValuesRequest_CLIENT_VERSION           ListUniqueExecutionBlockTraceValuesRequest_Field = 7
)

// Enum value maps for ListUniqueExecutionBlockTraceValuesRequest_Field.
var (
	ListUniqueExecutionBlockTraceValuesRequest_Field_name = map[int32]string{
		0: "NODE",
		1: "BLOCK_HASH",
		2: "BLOCK_NUMBER",
		3: "LOCATION",
		4: "NETWORK",
		5: "EXECUTION_IMPLEMENTATION",
		6: "NODE_VERSION",
		7: "CLIENT_VERSION",
	}
	ListUniqueExecutionBlockTraceValuesRequest_Field_value = map[string]int32{
		"NODE":                     0,
		"BLOCK_HASH":               1,
		"BLOCK_NUMBER":             2,
		"LOCATION":                 3,
		"NETWORK":                  4,
		"EXECUTION_IMPLEMENTATION": 5,
		"NODE_VERSION":             6,
		"CLIENT_VERSION":           7,
	}
)

func (x ListUniqueExecutionBlockTraceValuesRequest_Field) Enum() *ListUniqueExecutionBlockTraceValuesRequest_Field {
	p := new(ListUniqueExecutionBlockTraceValuesRequest_Field)
	*p = x
	return p
}

func (x ListUniqueExecutionBlockTraceValuesRequest_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUniqueExecutionBlockTraceValuesRequest_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_indexer_proto_enumTypes[0].Descriptor()
}

func (ListUniqueExecutionBlockTraceValuesRequest_Field) Type() protoreflect.EnumType {
	return &file_indexer_indexer_proto_enumTypes[0]
}

func (x ListUniqueExecutionBlockTraceValuesRequest_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUniqueExecutionBlockTraceValuesRequest_Field.Descriptor instead.
func (ListUniqueExecutionBlockTraceValuesRequest_Field) EnumDescriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{30, 0}
}

type ListUniqueBeaconStateValuesRequest_Field int32

const (
	ListUniqueBeaconStateValuesRequest_NODE                  ListUniqueBeaconStateValuesRequest_Field = 0
	ListUniqueBeaconStateValuesRequest_SLOT                  ListUniqueBeaconStateValuesRequest_Field = 1
	ListUniqueBeaconStateValuesRequest_EPOCH                 ListUniqueBeaconStateValuesRequest_Field = 2
	ListUniqueBeaconStateValuesRequest_STATE_ROOT            ListUniqueBeaconStateValuesRequest_Field = 3
	ListUniqueBeaconStateValuesRequest_NODE_VERSION          ListUniqueBeaconStateValuesRequest_Field = 4
	ListUniqueBeaconStateValuesRequest_LOCATION              ListUniqueBeaconStateValuesRequest_Field = 5
	ListUniqueBeaconStateValuesRequest_NETWORK               ListUniqueBeaconStateValuesRequest_Field = 6
	ListUniqueBeaconStateValuesRequest_BEACON_IMPLEMENTATION ListUniqueBeaconStateValuesRequest_Field = 7
)

// Enum value maps for ListUniqueBeaconStateValuesRequest_Field.
var (
	ListUniqueBeaconStateValuesRequest_Field_name = map[int32]string{
		0: "NODE",
		1: "SLOT",
		2: "EPOCH",
		3: "STATE_ROOT",
		4: "NODE_VERSION",
		5: "LOCATION",
		6: "NETWORK",
		7: "BEACON_IMPLEMENTATION",
	}
	ListUniqueBeaconStateValuesRequest_Field_value = map[string]int32{
		"NODE":                  0,
		"SLOT":                  1,
		"EPOCH":                 2,
		"STATE_ROOT":            3,
		"NODE_VERSION":          4,
		"LOCATION":              5,
		"NETWORK":               6,
		"BEACON_IMPLEMENTATION": 7,
	}
)

func (x ListUniqueBeaconStateValuesRequest_Field) Enum() *ListUniqueBeaconStateValuesRequest_Field {
	p := new(ListUniqueBeaconStateValuesRequest_Field)
	*p = x
	return p
}

func (x ListUniqueBeaconStateValuesRequest_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUniqueBeaconStateValuesRequest_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_indexer_proto_enumTypes[1].Descriptor()
}

func (ListUniqueBeaconStateValuesRequest_Field) Type() protoreflect.EnumType {
	return &file_indexer_indexer_proto_enumTypes[1]
}

func (x ListUniqueBeaconStateValuesRequest_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUniqueBeaconStateValuesRequest_Field.Descriptor instead.
func (ListUniqueBeaconStateValuesRequest_Field) EnumDescriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{32, 0}
}

type ListUniqueBeaconBlockValuesRequest_Field int32

const (
	ListUniqueBeaconBlockValuesRequest_NODE                  ListUniqueBeaconBlockValuesRequest_Field = 0
	ListUniqueBeaconBlockValuesRequest_SLOT                  ListUniqueBeaconBlockValuesRequest_Field = 1
	ListUniqueBeaconBlockValuesRequest_EPOCH                 ListUniqueBeaconBlockValuesRequest_Field = 2
	ListUniqueBeaconBlockValuesRequest_BLOCK_ROOT            ListUniqueBeaconBlockValuesRequest_Field = 3
	ListUniqueBeaconBlockValuesRequest_NODE_VERSION          ListUniqueBeaconBlockValuesRequest_Field = 4
	ListUniqueBeaconBlockValuesRequest_LOCATION              ListUniqueBeaconBlockValuesRequest_Field = 5
	ListUniqueBeaconBlockValuesRequest_NETWORK               ListUniqueBeaconBlockValuesRequest_Field = 6
	ListUniqueBeaconBlockValuesRequest_BEACON_IMPLEMENTATION ListUniqueBeaconBlockValuesRequest_Field = 7
)

// Enum value maps for ListUniqueBeaconBlockValuesRequest_Field.
var (
	ListUniqueBeaconBlockValuesRequest_Field_name = map[int32]string{
		0: "NODE",
		1: "SLOT",
		2: "EPOCH",
		3: "BLOCK_ROOT",
		4: "NODE_VERSION",
		5: "LOCATION",
		6: "NETWORK",
		7: "BEACON_IMPLEMENTATION",
	}
	ListUniqueBeaconBlockValuesRequest_Field_value = map[string]int32{
		"NODE":                  0,
		"SLOT":                  1,
		"EPOCH":                 2,
		"BLOCK_ROOT":            3,
		"NODE_VERSION":          4,
		"LOCATION":              5,
		"NETWORK":               6,
		"BEACON_IMPLEMENTATION": 7,
	}
)

func (x ListUniqueBeaconBlockValuesRequest_Field) Enum() *ListUniqueBeaconBlockValuesRequest_Field {
	p := new(ListUniqueBeaconBlockValuesRequest_Field)
	*p = x
	return p
}

func (x ListUniqueBeaconBlockValuesRequest_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUniqueBeaconBlockValuesRequest_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_indexer_proto_enumTypes[2].Descriptor()
}

func (ListUniqueBeaconBlockValuesRequest_Field) Type() protoreflect.EnumType {
	return &file_indexer_indexer_proto_enumTypes[2]
}

func (x ListUniqueBeaconBlockValuesRequest_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUniqueBeaconBlockValuesRequest_Field.Descriptor instead.
func (ListUniqueBeaconBlockValuesRequest_Field) EnumDescriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{38, 0}
}

type ListUniqueBeaconBadBlockValuesRequest_Field int32

const (
	ListUniqueBeaconBadBlockValuesRequest_NODE                  ListUniqueBeaconBadBlockValuesRequest_Field = 0
	ListUniqueBeaconBadBlockValuesRequest_SLOT                  ListUniqueBeaconBadBlockValuesRequest_Field = 1
	ListUniqueBeaconBadBlockValuesRequest_EPOCH                 ListUniqueBeaconBadBlockValuesRequest_Field = 2
	ListUniqueBeaconBadBlockValuesRequest_BLOCK_ROOT            ListUniqueBeaconBadBlockValuesRequest_Field = 3
	ListUniqueBeaconBadBlockValuesRequest_NODE_VERSION          ListUniqueBeaconBadBlockValuesRequest_Field = 4
	ListUniqueBeaconBadBlockValuesRequest_LOCATION              ListUniqueBeaconBadBlockValuesRequest_Field = 5
	ListUniqueBeaconBadBlockValuesRequest_NETWORK               ListUniqueBeaconBadBlockValuesRequest_Field = 6
	ListUniqueBeaconBadBlockValuesRequest_BEACON_IMPLEMENTATION ListUniqueBeaconBadBlockValuesRequest_Field = 7
)

// Enum value maps for ListUniqueBeaconBadBlockValuesRequest_Field.
var (
	ListUniqueBeaconBadBlockValuesRequest_Field_name = map[int32]string{
		0: "NODE",
		1: "SLOT",
		2: "EPOCH",
		3: "BLOCK_ROOT",
		4: "NODE_VERSION",
		5: "LOCATION",
		6: "NETWORK",
		7: "BEACON_IMPLEMENTATION",
	}
	ListUniqueBeaconBadBlockValuesRequest_Field_value = map[string]int32{
		"NODE":                  0,
		"SLOT":                  1,
		"EPOCH":                 2,
		"BLOCK_ROOT":            3,
		"NODE_VERSION":          4,
		"LOCATION":              5,
		"NETWORK":               6,
		"BEACON_IMPLEMENTATION": 7,
	}
)

func (x ListUniqueBeaconBadBlockValuesRequest_Field) Enum() *ListUniqueBeaconBadBlockValuesRequest_Field {
	p := new(ListUniqueBeaconBadBlockValuesRequest_Field)
	*p = x
	return p
}

func (x ListUniqueBeaconBadBlockValuesRequest_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUniqueBeaconBadBlockValuesRequest_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_indexer_proto_enumTypes[3].Descriptor()
}

func (ListUniqueBeaconBadBlockValuesRequest_Field) Type() protoreflect.EnumType {
	return &file_indexer_indexer_proto_enumTypes[3]
}

func (x ListUniqueBeaconBadBlockValuesRequest_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUniqueBeaconBadBlockValuesRequest_Field.Descriptor instead.
func (ListUniqueBeaconBadBlockValuesRequest_Field) EnumDescriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{44, 0}
}

type ListUniqueBeaconBadBlobValuesRequest_Field int32

const (
	ListUniqueBeaconBadBlobValuesRequest_NODE                  ListUniqueBeaconBadBlobValuesRequest_Field = 0
	ListUniqueBeaconBadBlobValuesRequest_SLOT                  ListUniqueBeaconBadBlobValuesRequest_Field = 1
	ListUniqueBeaconBadBlobValuesRequest_EPOCH                 ListUniqueBeaconBadBlobValuesRequest_Field = 2
	ListUniqueBeaconBadBlobValuesRequest_BLOCK_ROOT            ListUniqueBeaconBadBlobValuesRequest_Field = 3
	ListUniqueBeaconBadBlobValuesRequest_NODE_VERSION          ListUniqueBeaconBadBlobValuesRequest_Field = 4
	ListUniqueBeaconBadBlobValuesRequest_LOCATION              ListUniqueBeaconBadBlobValuesRequest_Field = 5
	ListUniqueBeaconBadBlobValuesRequest_NETWORK               ListUniqueBeaconBadBlobValuesRequest_Field = 6
	ListUniqueBeaconBadBlobValuesRequest_BEACON_IMPLEMENTATION ListUniqueBeaconBadBlobValuesRequest_Field = 7
	ListUniqueBeaconBadBlobValuesRequest_INDEX                 ListUniqueBeaconBadBlobValuesRequest_Field = 8
)

// Enum value maps for ListUniqueBeaconBadBlobValuesRequest_Field.
var (
	ListUniqueBeaconBadBlobValuesRequest_Field_name = map[int32]string{
		0: "NODE",
		1: "SLOT",
		2: "EPOCH",
		3: "BLOCK_ROOT",
		4: "NODE_VERSION",
		5: "LOCATION",
		6: "NETWORK",
		7: "BEACON_IMPLEMENTATION",
		8: "INDEX",
	}
	ListUniqueBeaconBadBlobValuesRequest_Field_value = map[string]int32{
		"NODE":                  0,
		"SLOT":                  1,
		"EPOCH":                 2,
		"BLOCK_ROOT":            3,
		"NODE_VERSION":          4,
		"LOCATION":              5,
		"NETWORK":               6,
		"BEACON_IMPLEMENTATION": 7,
		"INDEX":                 8,
	}
)

func (x ListUniqueBeaconBadBlobValuesRequest_Field) Enum() *ListUniqueBeaconBadBlobValuesRequest_Field {
	p := new(ListUniqueBeaconBadBlobValuesRequest_Field)
	*p = x
	return p
}

func (x ListUniqueBeaconBadBlobValuesRequest_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUniqueBeaconBadBlobValuesRequest_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_indexer_proto_enumTypes[4].Descriptor()
}

func (ListUniqueBeaconBadBlobValuesRequest_Field) Type() protoreflect.EnumType {
	return &file_indexer_indexer_proto_enumTypes[4]
}

func (x ListUniqueBeaconBadBlobValuesRequest_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUniqueBeaconBadBlobValuesRequest_Field.Descriptor instead.
func (ListUniqueBeaconBadBlobValuesRequest_Field) EnumDescriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{50, 0}
}

type ListUniqueExecutionBadBlockValuesRequest_Field int32

const (
	ListUniqueExecutionBadBlockValuesRequest_NODE                     ListUniqueExecutionBadBlockValuesRequest_Field = 0
	ListUniqueExecutionBadBlockValuesRequest_BLOCK_HASH               ListUniqueExecutionBadBlockValuesRequest_Field = 1
	ListUniqueExecutionBadBlockValuesRequest_BLOCK_NUMBER             ListUniqueExecutionBadBlockValuesRequest_Field = 2
	ListUniqueExecutionBadBlockValuesRequest_LOCATION                 ListUniqueExecutionBadBlockValuesRequest_Field = 3
	ListUniqueExecutionBadBlockValuesRequest_NETWORK                  ListUniqueExecutionBadBlockValuesRequest_Field = 4
	ListUniqueExecutionBadBlockValuesRequest_EXECUTION_IMPLEMENTATION ListUniqueExecutionBadBlockValuesRequest_Field = 5
	ListUniqueExecutionBadBlockValuesRequest_NODE_VERSION             ListUniqueExecutionBadBlockValuesRequest_Field = 6
	ListUniqueExecutionBadBlockValuesRequest_CLIENT_VERSION           ListUniqueExecutionBadBlockValuesRequest_Field = 7
	ListUniqueExecutionBadBlockValuesRequest_BLOCK_EXTRA_DATA         ListUniqueExecutionBadBlockValuesRequest_Field = 8
)

// Enum value maps for ListUniqueExecutionBadBlockValuesRequest_Field.
var (
	ListUniqueExecutionBadBlockValuesRequest_Field_name = map[int32]string{
		0: "NODE",
		1: "BLOCK_HASH",
		2: "BLOCK_NUMBER",
		3: "LOCATION",
		4: "NETWORK",
		5: "EXECUTION_IMPLEMENTATION",
		6: "NODE_VERSION",
		7: "CLIENT_VERSION",
		8: "BLOCK_EXTRA_DATA",
	}
	ListUniqueExecutionBadBlockValuesRequest_Field_value = map[string]int32{
		"NODE":                     0,
		"BLOCK_HASH":               1,
		"BLOCK_NUMBER":             2,
		"LOCATION":                 3,
		"NETWORK":                  4,
		"EXECUTION_IMPLEMENTATION": 5,
		"NODE_VERSION":             6,
		"CLIENT_VERSION":           7,
		"BLOCK_EXTRA_DATA":         8,
	}
)

func (x ListUniqueExecutionBadBlockValuesRequest_Field) Enum() *ListUniqueExecutionBadBlockValuesRequest_Field {
	p := new(ListUniqueExecutionBadBlockValuesRequest_Field)
	*p = x
	return p
}

func (x ListUniqueExecutionBadBlockValuesRequest_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUniqueExecutionBadBlockValuesRequest_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_indexer_proto_enumTypes[5].Descriptor()
}

func (ListUniqueExecutionBadBlockValuesRequest_Field) Type() protoreflect.EnumType {
	return &file_indexer_indexer_proto_enumTypes[5]
}

func (x ListUniqueExecutionBadBlockValuesRequest_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUniqueExecutionBadBlockValuesRequest_Field.Descriptor instead.
func (ListUniqueExecutionBadBlockValuesRequest_Field) EnumDescriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{63, 0}
}

type BeaconState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt            *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	Slot                 *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StateRoot            *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	NodeVersion          *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Network              *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *BeaconState) Reset() {
	*x = BeaconState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconState) ProtoMessage() {}

func (x *BeaconState) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconState.ProtoReflect.Descriptor instead.
func (*BeaconState) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *BeaconState) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BeaconState) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *BeaconState) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *BeaconState) GetSlot() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *BeaconState) GetEpoch() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *BeaconState) GetStateRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *BeaconState) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *BeaconState) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *BeaconState) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *BeaconState) GetBeaconImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type BeaconBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt            *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	Slot                 *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Network              *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *BeaconBlock) Reset() {
	*x = BeaconBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconBlock) ProtoMessage() {}

func (x *BeaconBlock) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconBlock.ProtoReflect.Descriptor instead.
func (*BeaconBlock) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{1}
}

func (x *BeaconBlock) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BeaconBlock) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *BeaconBlock) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *BeaconBlock) GetSlot() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *BeaconBlock) GetEpoch() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *BeaconBlock) GetBlockRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *BeaconBlock) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *BeaconBlock) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *BeaconBlock) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *BeaconBlock) GetBeaconImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type BeaconBadBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt            *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	Slot                 *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Network              *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *BeaconBadBlock) Reset() {
	*x = BeaconBadBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconBadBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconBadBlock) ProtoMessage() {}

func (x *BeaconBadBlock) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconBadBlock.ProtoReflect.Descriptor instead.
func (*BeaconBadBlock) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{2}
}

func (x *BeaconBadBlock) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BeaconBadBlock) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *BeaconBadBlock) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *BeaconBadBlock) GetSlot() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *BeaconBadBlock) GetEpoch() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *BeaconBadBlock) GetBlockRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *BeaconBadBlock) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *BeaconBadBlock) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *BeaconBadBlock) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *BeaconBadBlock) GetBeaconImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type BeaconBadBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt            *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	Slot                 *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Network              *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
	Index                *wrapperspb.UInt64Value `protobuf:"bytes,11,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *BeaconBadBlob) Reset() {
	*x = BeaconBadBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconBadBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconBadBlob) ProtoMessage() {}

func (x *BeaconBadBlob) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconBadBlob.ProtoReflect.Descriptor instead.
func (*BeaconBadBlob) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{3}
}

func (x *BeaconBadBlob) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BeaconBadBlob) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *BeaconBadBlob) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *BeaconBadBlob) GetSlot() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *BeaconBadBlob) GetEpoch() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *BeaconBadBlob) GetBlockRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *BeaconBadBlob) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *BeaconBadBlob) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *BeaconBadBlob) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *BeaconBadBlob) GetBeaconImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

func (x *BeaconBadBlob) GetIndex() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Index
	}
	return nil
}

type ExecutionBlockTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt               *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	BlockHash               *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network                 *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *ExecutionBlockTrace) Reset() {
	*x = ExecutionBlockTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionBlockTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionBlockTrace) ProtoMessage() {}

func (x *ExecutionBlockTrace) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionBlockTrace.ProtoReflect.Descriptor instead.
func (*ExecutionBlockTrace) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{4}
}

func (x *ExecutionBlockTrace) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExecutionBlockTrace) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ExecutionBlockTrace) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *ExecutionBlockTrace) GetBlockHash() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionBlockTrace) GetBlockNumber() *wrapperspb.Int64Value {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *ExecutionBlockTrace) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ExecutionBlockTrace) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ExecutionBlockTrace) GetExecutionImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *ExecutionBlockTrace) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

type ExecutionBadBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt               *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	BlockHash               *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network                 *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	BlockExtraData          *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=block_extra_data,json=blockExtraData,proto3" json:"block_extra_data,omitempty"`
}

func (x *ExecutionBadBlock) Reset() {
	*x = ExecutionBadBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionBadBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionBadBlock) ProtoMessage() {}

func (x *ExecutionBadBlock) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionBadBlock.ProtoReflect.Descriptor instead.
func (*ExecutionBadBlock) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{5}
}

func (x *ExecutionBadBlock) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExecutionBadBlock) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ExecutionBadBlock) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *ExecutionBadBlock) GetBlockHash() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionBadBlock) GetBlockNumber() *wrapperspb.Int64Value {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *ExecutionBadBlock) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ExecutionBadBlock) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ExecutionBadBlock) GetExecutionImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *ExecutionBadBlock) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ExecutionBadBlock) GetBlockExtraData() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockExtraData
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ethereum *EthereumConfig `protobuf:"bytes,1,opt,name=ethereum,proto3" json:"ethereum,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{6}
}

func (x *Config) GetEthereum() *EthereumConfig {
	if x != nil {
		return x.Ethereum
	}
	return nil
}

type EthereumConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Config  *EthereumNetworkConfig  `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Tools   *ToolsConfig            `protobuf:"bytes,3,opt,name=tools,proto3" json:"tools,omitempty"`
}

func (x *EthereumConfig) Reset() {
	*x = EthereumConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumConfig) ProtoMessage() {}

func (x *EthereumConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumConfig.ProtoReflect.Descriptor instead.
func (*EthereumConfig) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{7}
}

func (x *EthereumConfig) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *EthereumConfig) GetConfig() *EthereumNetworkConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *EthereumConfig) GetTools() *ToolsConfig {
	if x != nil {
		return x.Tools
	}
	return nil
}

type EthereumNetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Path       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *EthereumNetworkConfig) Reset() {
	*x = EthereumNetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumNetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumNetworkConfig) ProtoMessage() {}

func (x *EthereumNetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumNetworkConfig.ProtoReflect.Descriptor instead.
func (*EthereumNetworkConfig) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{8}
}

func (x *EthereumNetworkConfig) GetRepository() *wrapperspb.StringValue {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *EthereumNetworkConfig) GetBranch() *wrapperspb.StringValue {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *EthereumNetworkConfig) GetPath() *wrapperspb.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

type ToolsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ncli *GitRepositoryConfig `protobuf:"bytes,1,opt,name=ncli,proto3" json:"ncli,omitempty"`
	Lcli *GitRepositoryConfig `protobuf:"bytes,2,opt,name=lcli,proto3" json:"lcli,omitempty"`
	Zcli *ZcliConfig          `protobuf:"bytes,3,opt,name=zcli,proto3" json:"zcli,omitempty"`
}

func (x *ToolsConfig) Reset() {
	*x = ToolsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolsConfig) ProtoMessage() {}

func (x *ToolsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolsConfig.ProtoReflect.Descriptor instead.
func (*ToolsConfig) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{9}
}

func (x *ToolsConfig) GetNcli() *GitRepositoryConfig {
	if x != nil {
		return x.Ncli
	}
	return nil
}

func (x *ToolsConfig) GetLcli() *GitRepositoryConfig {
	if x != nil {
		return x.Lcli
	}
	return nil
}

func (x *ToolsConfig) GetZcli() *ZcliConfig {
	if x != nil {
		return x.Zcli
	}
	return nil
}

type GitRepositoryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Branch     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GitRepositoryConfig) Reset() {
	*x = GitRepositoryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitRepositoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRepositoryConfig) ProtoMessage() {}

func (x *GitRepositoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRepositoryConfig.ProtoReflect.Descriptor instead.
func (*GitRepositoryConfig) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{10}
}

func (x *GitRepositoryConfig) GetRepository() *wrapperspb.StringValue {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *GitRepositoryConfig) GetBranch() *wrapperspb.StringValue {
	if x != nil {
		return x.Branch
	}
	return nil
}

type ZcliConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fork *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=fork,proto3" json:"fork,omitempty"`
}

func (x *ZcliConfig) Reset() {
	*x = ZcliConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZcliConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZcliConfig) ProtoMessage() {}

func (x *ZcliConfig) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZcliConfig.ProtoReflect.Descriptor instead.
func (*ZcliConfig) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{11}
}

func (x *ZcliConfig) GetFork() *wrapperspb.StringValue {
	if x != nil {
		return x.Fork
	}
	return nil
}

type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{12}
}

type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{13}
}

func (x *GetConfigResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetStorageHandshakeTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node  string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetStorageHandshakeTokenRequest) Reset() {
	*x = GetStorageHandshakeTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStorageHandshakeTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStorageHandshakeTokenRequest) ProtoMessage() {}

func (x *GetStorageHandshakeTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStorageHandshakeTokenRequest.ProtoReflect.Descriptor instead.
func (*GetStorageHandshakeTokenRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{14}
}

func (x *GetStorageHandshakeTokenRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *GetStorageHandshakeTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetStorageHandshakeTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetStorageHandshakeTokenResponse) Reset() {
	*x = GetStorageHandshakeTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStorageHandshakeTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStorageHandshakeTokenResponse) ProtoMessage() {}

func (x *GetStorageHandshakeTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStorageHandshakeTokenResponse.ProtoReflect.Descriptor instead.
func (*GetStorageHandshakeTokenResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{15}
}

func (x *GetStorageHandshakeTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateBeaconStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt            *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	Slot                 *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StateRoot            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	NodeVersion          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Network              *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *CreateBeaconStateRequest) Reset() {
	*x = CreateBeaconStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeaconStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeaconStateRequest) ProtoMessage() {}

func (x *CreateBeaconStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeaconStateRequest.ProtoReflect.Descriptor instead.
func (*CreateBeaconStateRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{16}
}

func (x *CreateBeaconStateRequest) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetSlot() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetEpoch() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetStateRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetBeaconImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type CreateBeaconStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateBeaconStateResponse) Reset() {
	*x = CreateBeaconStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeaconStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeaconStateResponse) ProtoMessage() {}

func (x *CreateBeaconStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeaconStateResponse.ProtoReflect.Descriptor instead.
func (*CreateBeaconStateResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{17}
}

func (x *CreateBeaconStateResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type CreateBeaconBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt            *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	Slot                 *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Network              *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *CreateBeaconBlockRequest) Reset() {
	*x = CreateBeaconBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeaconBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeaconBlockRequest) ProtoMessage() {}

func (x *CreateBeaconBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeaconBlockRequest.ProtoReflect.Descriptor instead.
func (*CreateBeaconBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{18}
}

func (x *CreateBeaconBlockRequest) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateBeaconBlockRequest) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *CreateBeaconBlockRequest) GetSlot() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *CreateBeaconBlockRequest) GetEpoch() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *CreateBeaconBlockRequest) GetBlockRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *CreateBeaconBlockRequest) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *CreateBeaconBlockRequest) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateBeaconBlockRequest) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateBeaconBlockRequest) GetBeaconImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type CreateBeaconBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateBeaconBlockResponse) Reset() {
	*x = CreateBeaconBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeaconBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeaconBlockResponse) ProtoMessage() {}

func (x *CreateBeaconBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeaconBlockResponse.ProtoReflect.Descriptor instead.
func (*CreateBeaconBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{19}
}

func (x *CreateBeaconBlockResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type CreateBeaconBadBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt            *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	Slot                 *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Network              *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *CreateBeaconBadBlockRequest) Reset() {
	*x = CreateBeaconBadBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeaconBadBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeaconBadBlockRequest) ProtoMessage() {}

func (x *CreateBeaconBadBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeaconBadBlockRequest.ProtoReflect.Descriptor instead.
func (*CreateBeaconBadBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{20}
}

func (x *CreateBeaconBadBlockRequest) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateBeaconBadBlockRequest) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *CreateBeaconBadBlockRequest) GetSlot() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *CreateBeaconBadBlockRequest) GetEpoch() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *CreateBeaconBadBlockRequest) GetBlockRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *CreateBeaconBadBlockRequest) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *CreateBeaconBadBlockRequest) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateBeaconBadBlockRequest) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateBeaconBadBlockRequest) GetBeaconImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type CreateBeaconBadBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateBeaconBadBlockResponse) Reset() {
	*x = CreateBeaconBadBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeaconBadBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeaconBadBlockResponse) ProtoMessage() {}

func (x *CreateBeaconBadBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeaconBadBlockResponse.ProtoReflect.Descriptor instead.
func (*CreateBeaconBadBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{21}
}

func (x *CreateBeaconBadBlockResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type CreateBeaconBadBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt            *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	Slot                 *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Network              *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
	Index                *wrapperspb.UInt64Value `protobuf:"bytes,10,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *CreateBeaconBadBlobRequest) Reset() {
	*x = CreateBeaconBadBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeaconBadBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeaconBadBlobRequest) ProtoMessage() {}

func (x *CreateBeaconBadBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeaconBadBlobRequest.ProtoReflect.Descriptor instead.
func (*CreateBeaconBadBlobRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{22}
}

func (x *CreateBeaconBadBlobRequest) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateBeaconBadBlobRequest) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *CreateBeaconBadBlobRequest) GetSlot() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *CreateBeaconBadBlobRequest) GetEpoch() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *CreateBeaconBadBlobRequest) GetBlockRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *CreateBeaconBadBlobRequest) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *CreateBeaconBadBlobRequest) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateBeaconBadBlobRequest) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateBeaconBadBlobRequest) GetBeaconImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

func (x *CreateBeaconBadBlobRequest) GetIndex() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Index
	}
	return nil
}

type CreateBeaconBadBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateBeaconBadBlobResponse) Reset() {
	*x = CreateBeaconBadBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeaconBadBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeaconBadBlobResponse) ProtoMessage() {}

func (x *CreateBeaconBadBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeaconBadBlobResponse.ProtoReflect.Descriptor instead.
func (*CreateBeaconBadBlobResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{23}
}

func (x *CreateBeaconBadBlobResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type CreateExecutionBlockTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt               *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	BlockHash               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Network                 *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *CreateExecutionBlockTraceRequest) Reset() {
	*x = CreateExecutionBlockTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExecutionBlockTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExecutionBlockTraceRequest) ProtoMessage() {}

func (x *CreateExecutionBlockTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExecutionBlockTraceRequest.ProtoReflect.Descriptor instead.
func (*CreateExecutionBlockTraceRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{24}
}

func (x *CreateExecutionBlockTraceRequest) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetBlockHash() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetBlockNumber() *wrapperspb.Int64Value {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetExecutionImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

type CreateExecutionBlockTraceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateExecutionBlockTraceResponse) Reset() {
	*x = CreateExecutionBlockTraceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExecutionBlockTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExecutionBlockTraceResponse) ProtoMessage() {}

func (x *CreateExecutionBlockTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExecutionBlockTraceResponse.ProtoReflect.Descriptor instead.
func (*CreateExecutionBlockTraceResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{25}
}

func (x *CreateExecutionBlockTraceResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type ListExecutionBlockTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	BlockNumber             int64                  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash               string                 `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Location                string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Network                 string                 `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Before                  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=before,proto3" json:"before,omitempty"`
	After                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=after,proto3" json:"after,omitempty"`
	Pagination              *PaginationCursor      `protobuf:"bytes,8,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id                      string                 `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	ExecutionImplementation string                 `protobuf:"bytes,10,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             string                 `protobuf:"bytes,11,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *ListExecutionBlockTraceRequest) Reset() {
	*x = ListExecutionBlockTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExecutionBlockTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionBlockTraceRequest) ProtoMessage() {}

func (x *ListExecutionBlockTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionBlockTraceRequest.ProtoReflect.Descriptor instead.
func (*ListExecutionBlockTraceRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{26}
}

func (x *ListExecutionBlockTraceRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ListExecutionBlockTraceRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ListExecutionBlockTraceRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ListExecutionBlockTraceRequest) GetPagination() *PaginationCursor {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListExecutionBlockTraceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetExecutionImplementation() string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

type ListExecutionBlockTraceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionBlockTraces []*ExecutionBlockTrace `protobuf:"bytes,1,rep,name=execution_block_traces,json=executionBlockTraces,proto3" json:"execution_block_traces,omitempty"`
}

func (x *ListExecutionBlockTraceResponse) Reset() {
	*x = ListExecutionBlockTraceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExecutionBlockTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionBlockTraceResponse) ProtoMessage() {}

func (x *ListExecutionBlockTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionBlockTraceResponse.ProtoReflect.Descriptor instead.
func (*ListExecutionBlockTraceResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{27}
}

func (x *ListExecutionBlockTraceResponse) GetExecutionBlockTraces() []*ExecutionBlockTrace {
	if x != nil {
		return x.ExecutionBlockTraces
	}
	return nil
}

type CountExecutionBlockTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	BlockNumber             int64                  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash               string                 `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Location                string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Network                 string                 `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Before                  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=before,proto3" json:"before,omitempty"`
	After                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=after,proto3" json:"after,omitempty"`
	ExecutionImplementation string                 `protobuf:"bytes,8,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             string                 `protobuf:"bytes,9,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *CountExecutionBlockTraceRequest) Reset() {
	*x = CountExecutionBlockTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountExecutionBlockTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountExecutionBlockTraceRequest) ProtoMessage() {}

func (x *CountExecutionBlockTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountExecutionBlockTraceRequest.ProtoReflect.Descriptor instead.
func (*CountExecutionBlockTraceRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{28}
}

func (x *CountExecutionBlockTraceRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *CountExecutionBlockTraceRequest) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *CountExecutionBlockTraceRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *CountExecutionBlockTraceRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CountExecutionBlockTraceRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CountExecutionBlockTraceRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CountExecutionBlockTraceRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CountExecutionBlockTraceRequest) GetExecutionImplementation() string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return ""
}

func (x *CountExecutionBlockTraceRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

type CountExecutionBlockTraceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountExecutionBlockTraceResponse) Reset() {
	*x = CountExecutionBlockTraceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountExecutionBlockTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountExecutionBlockTraceResponse) ProtoMessage() {}

func (x *CountExecutionBlockTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountExecutionBlockTraceResponse.ProtoReflect.Descriptor instead.
func (*CountExecutionBlockTraceResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{29}
}

func (x *CountExecutionBlockTraceResponse) GetCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ListUniqueExecutionBlockTraceValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []ListUniqueExecutionBlockTraceValuesRequest_Field `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=indexer.ListUniqueExecutionBlockTraceValuesRequest_Field" json:"fields,omitempty"`
}

func (x *ListUniqueExecutionBlockTraceValuesRequest) Reset() {
	*x = ListUniqueExecutionBlockTraceValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueExecutionBlockTraceValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueExecutionBlockTraceValuesRequest) ProtoMessage() {}

func (x *ListUniqueExecutionBlockTraceValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueExecutionBlockTraceValuesRequest.ProtoReflect.Descriptor instead.
func (*ListUniqueExecutionBlockTraceValuesRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{30}
}

func (x *ListUniqueExecutionBlockTraceValuesRequest) GetFields() []ListUniqueExecutionBlockTraceValuesRequest_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListUniqueExecutionBlockTraceValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    []string `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	BlockHash               []string `protobuf:"bytes,2,rep,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             []int64  `protobuf:"varint,3,rep,packed,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                []string `protobuf:"bytes,4,rep,name=location,proto3" json:"location,omitempty"`
	Network                 []string `protobuf:"bytes,5,rep,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation []string `protobuf:"bytes,6,rep,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             []string `protobuf:"bytes,7,rep,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	ClientVersion           []string `protobuf:"bytes,8,rep,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) Reset() {
	*x = ListUniqueExecutionBlockTraceValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueExecutionBlockTraceValuesResponse) ProtoMessage() {}

func (x *ListUniqueExecutionBlockTraceValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueExecutionBlockTraceValuesResponse.ProtoReflect.Descriptor instead.
func (*ListUniqueExecutionBlockTraceValuesResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{31}
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetNode() []string {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetBlockHash() []string {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetBlockNumber() []int64 {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetNetwork() []string {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetExecutionImplementation() []string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetNodeVersion() []string {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetClientVersion() []string {
	if x != nil {
		return x.ClientVersion
	}
	return nil
}

type ListUniqueBeaconStateValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []ListUniqueBeaconStateValuesRequest_Field `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=indexer.ListUniqueBeaconStateValuesRequest_Field" json:"fields,omitempty"`
}

func (x *ListUniqueBeaconStateValuesRequest) Reset() {
	*x = ListUniqueBeaconStateValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueBeaconStateValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueBeaconStateValuesRequest) ProtoMessage() {}

func (x *ListUniqueBeaconStateValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueBeaconStateValuesRequest.ProtoReflect.Descriptor instead.
func (*ListUniqueBeaconStateValuesRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{32}
}

func (x *ListUniqueBeaconStateValuesRequest) GetFields() []ListUniqueBeaconStateValuesRequest_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListUniqueBeaconStateValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 []string `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	Slot                 []uint64 `protobuf:"varint,2,rep,packed,name=slot,proto3" json:"slot,omitempty"`
	Epoch                []uint64 `protobuf:"varint,3,rep,packed,name=epoch,proto3" json:"epoch,omitempty"`
	StateRoot            []string `protobuf:"bytes,4,rep,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	NodeVersion          []string `protobuf:"bytes,5,rep,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             []string `protobuf:"bytes,6,rep,name=location,proto3" json:"location,omitempty"`
	Network              []string `protobuf:"bytes,7,rep,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation []string `protobuf:"bytes,8,rep,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *ListUniqueBeaconStateValuesResponse) Reset() {
	*x = ListUniqueBeaconStateValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueBeaconStateValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueBeaconStateValuesResponse) ProtoMessage() {}

func (x *ListUniqueBeaconStateValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueBeaconStateValuesResponse.ProtoReflect.Descriptor instead.
func (*ListUniqueBeaconStateValuesResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{33}
}

func (x *ListUniqueBeaconStateValuesResponse) GetNode() []string {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetSlot() []uint64 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetEpoch() []uint64 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetStateRoot() []string {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetNodeVersion() []string {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetNetwork() []string {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetBeaconImplementation() []string {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type ListBeaconStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Slot                 uint64                 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                uint64                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StateRoot            string                 `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	NodeVersion          string                 `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network              string                 `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Before               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
	After                *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	Pagination           *PaginationCursor      `protobuf:"bytes,10,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id                   string                 `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	BeaconImplementation string                 `protobuf:"bytes,12,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *ListBeaconStateRequest) Reset() {
	*x = ListBeaconStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeaconStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeaconStateRequest) ProtoMessage() {}

func (x *ListBeaconStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeaconStateRequest.ProtoReflect.Descriptor instead.
func (*ListBeaconStateRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{34}
}

func (x *ListBeaconStateRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ListBeaconStateRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ListBeaconStateRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ListBeaconStateRequest) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *ListBeaconStateRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *ListBeaconStateRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListBeaconStateRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ListBeaconStateRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ListBeaconStateRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ListBeaconStateRequest) GetPagination() *PaginationCursor {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListBeaconStateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListBeaconStateRequest) GetBeaconImplementation() string {
	if x != nil {
		return x.BeaconImplementation
	}
	return ""
}

type ListBeaconStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconStates []*BeaconState `protobuf:"bytes,1,rep,name=beacon_states,json=beaconStates,proto3" json:"beacon_states,omitempty"`
}

func (x *ListBeaconStateResponse) Reset() {
	*x = ListBeaconStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeaconStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeaconStateResponse) ProtoMessage() {}

func (x *ListBeaconStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeaconStateResponse.ProtoReflect.Descriptor instead.
func (*ListBeaconStateResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{35}
}

func (x *ListBeaconStateResponse) GetBeaconStates() []*BeaconState {
	if x != nil {
		return x.BeaconStates
	}
	return nil
}

type CountBeaconStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Slot                 uint64                 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                uint64                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StateRoot            string                 `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	NodeVersion          string                 `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network              string                 `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Before               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
	After                *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	BeaconImplementation string                 `protobuf:"bytes,10,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
	Id                   string                 `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CountBeaconStateRequest) Reset() {
	*x = CountBeaconStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBeaconStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBeaconStateRequest) ProtoMessage() {}

func (x *CountBeaconStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBeaconStateRequest.ProtoReflect.Descriptor instead.
func (*CountBeaconStateRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{36}
}

func (x *CountBeaconStateRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *CountBeaconStateRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *CountBeaconStateRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CountBeaconStateRequest) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *CountBeaconStateRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *CountBeaconStateRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CountBeaconStateRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CountBeaconStateRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CountBeaconStateRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CountBeaconStateRequest) GetBeaconImplementation() string {
	if x != nil {
		return x.BeaconImplementation
	}
	return ""
}

func (x *CountBeaconStateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CountBeaconStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountBeaconStateResponse) Reset() {
	*x = CountBeaconStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBeaconStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBeaconStateResponse) ProtoMessage() {}

func (x *CountBeaconStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBeaconStateResponse.ProtoReflect.Descriptor instead.
func (*CountBeaconStateResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{37}
}

func (x *CountBeaconStateResponse) GetCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ListUniqueBeaconBlockValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []ListUniqueBeaconBlockValuesRequest_Field `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=indexer.ListUniqueBeaconBlockValuesRequest_Field" json:"fields,omitempty"`
}

func (x *ListUniqueBeaconBlockValuesRequest) Reset() {
	*x = ListUniqueBeaconBlockValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueBeaconBlockValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueBeaconBlockValuesRequest) ProtoMessage() {}

func (x *ListUniqueBeaconBlockValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueBeaconBlockValuesRequest.ProtoReflect.Descriptor instead.
func (*ListUniqueBeaconBlockValuesRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{38}
}

func (x *ListUniqueBeaconBlockValuesRequest) GetFields() []ListUniqueBeaconBlockValuesRequest_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListUniqueBeaconBlockValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 []string `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	Slot                 []uint64 `protobuf:"varint,2,rep,packed,name=slot,proto3" json:"slot,omitempty"`
	Epoch                []uint64 `protobuf:"varint,3,rep,packed,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            []string `protobuf:"bytes,4,rep,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          []string `protobuf:"bytes,5,rep,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             []string `protobuf:"bytes,6,rep,name=location,proto3" json:"location,omitempty"`
	Network              []string `protobuf:"bytes,7,rep,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation []string `protobuf:"bytes,8,rep,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *ListUniqueBeaconBlockValuesResponse) Reset() {
	*x = ListUniqueBeaconBlockValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueBeaconBlockValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueBeaconBlockValuesResponse) ProtoMessage() {}

func (x *ListUniqueBeaconBlockValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueBeaconBlockValuesResponse.ProtoReflect.Descriptor instead.
func (*ListUniqueBeaconBlockValuesResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{39}
}

func (x *ListUniqueBeaconBlockValuesResponse) GetNode() []string {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListUniqueBeaconBlockValuesResponse) GetSlot() []uint64 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListUniqueBeaconBlockValuesResponse) GetEpoch() []uint64 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListUniqueBeaconBlockValuesResponse) GetBlockRoot() []string {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *ListUniqueBeaconBlockValuesResponse) GetNodeVersion() []string {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ListUniqueBeaconBlockValuesResponse) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ListUniqueBeaconBlockValuesResponse) GetNetwork() []string {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ListUniqueBeaconBlockValuesResponse) GetBeaconImplementation() []string {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type ListBeaconBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Slot                 uint64                 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                uint64                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            string                 `protobuf:"bytes,4,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          string                 `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network              string                 `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Before               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
	After                *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	Pagination           *PaginationCursor      `protobuf:"bytes,10,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id                   string                 `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	BeaconImplementation string                 `protobuf:"bytes,12,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *ListBeaconBlockRequest) Reset() {
	*x = ListBeaconBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeaconBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeaconBlockRequest) ProtoMessage() {}

func (x *ListBeaconBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeaconBlockRequest.ProtoReflect.Descriptor instead.
func (*ListBeaconBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{40}
}

func (x *ListBeaconBlockRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ListBeaconBlockRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ListBeaconBlockRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ListBeaconBlockRequest) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *ListBeaconBlockRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *ListBeaconBlockRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListBeaconBlockRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ListBeaconBlockRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ListBeaconBlockRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ListBeaconBlockRequest) GetPagination() *PaginationCursor {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListBeaconBlockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListBeaconBlockRequest) GetBeaconImplementation() string {
	if x != nil {
		return x.BeaconImplementation
	}
	return ""
}

type ListBeaconBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconBlocks []*BeaconBlock `protobuf:"bytes,1,rep,name=beacon_blocks,json=beaconBlocks,proto3" json:"beacon_blocks,omitempty"`
}

func (x *ListBeaconBlockResponse) Reset() {
	*x = ListBeaconBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeaconBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeaconBlockResponse) ProtoMessage() {}

func (x *ListBeaconBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeaconBlockResponse.ProtoReflect.Descriptor instead.
func (*ListBeaconBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{41}
}

func (x *ListBeaconBlockResponse) GetBeaconBlocks() []*BeaconBlock {
	if x != nil {
		return x.BeaconBlocks
	}
	return nil
}

type CountBeaconBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Slot                 uint64                 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                uint64                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            string                 `protobuf:"bytes,4,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          string                 `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network              string                 `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Before               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
	After                *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	BeaconImplementation string                 `protobuf:"bytes,10,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
	Id                   string                 `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CountBeaconBlockRequest) Reset() {
	*x = CountBeaconBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBeaconBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBeaconBlockRequest) ProtoMessage() {}

func (x *CountBeaconBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBeaconBlockRequest.ProtoReflect.Descriptor instead.
func (*CountBeaconBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{42}
}

func (x *CountBeaconBlockRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *CountBeaconBlockRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *CountBeaconBlockRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CountBeaconBlockRequest) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *CountBeaconBlockRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *CountBeaconBlockRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CountBeaconBlockRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CountBeaconBlockRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CountBeaconBlockRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CountBeaconBlockRequest) GetBeaconImplementation() string {
	if x != nil {
		return x.BeaconImplementation
	}
	return ""
}

func (x *CountBeaconBlockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CountBeaconBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountBeaconBlockResponse) Reset() {
	*x = CountBeaconBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBeaconBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBeaconBlockResponse) ProtoMessage() {}

func (x *CountBeaconBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBeaconBlockResponse.ProtoReflect.Descriptor instead.
func (*CountBeaconBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{43}
}

func (x *CountBeaconBlockResponse) GetCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ListUniqueBeaconBadBlockValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []ListUniqueBeaconBadBlockValuesRequest_Field `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=indexer.ListUniqueBeaconBadBlockValuesRequest_Field" json:"fields,omitempty"`
}

func (x *ListUniqueBeaconBadBlockValuesRequest) Reset() {
	*x = ListUniqueBeaconBadBlockValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueBeaconBadBlockValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueBeaconBadBlockValuesRequest) ProtoMessage() {}

func (x *ListUniqueBeaconBadBlockValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueBeaconBadBlockValuesRequest.ProtoReflect.Descriptor instead.
func (*ListUniqueBeaconBadBlockValuesRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{44}
}

func (x *ListUniqueBeaconBadBlockValuesRequest) GetFields() []ListUniqueBeaconBadBlockValuesRequest_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListUniqueBeaconBadBlockValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 []string `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	Slot                 []uint64 `protobuf:"varint,2,rep,packed,name=slot,proto3" json:"slot,omitempty"`
	Epoch                []uint64 `protobuf:"varint,3,rep,packed,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            []string `protobuf:"bytes,4,rep,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          []string `protobuf:"bytes,5,rep,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             []string `protobuf:"bytes,6,rep,name=location,proto3" json:"location,omitempty"`
	Network              []string `protobuf:"bytes,7,rep,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation []string `protobuf:"bytes,8,rep,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *ListUniqueBeaconBadBlockValuesResponse) Reset() {
	*x = ListUniqueBeaconBadBlockValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueBeaconBadBlockValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueBeaconBadBlockValuesResponse) ProtoMessage() {}

func (x *ListUniqueBeaconBadBlockValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueBeaconBadBlockValuesResponse.ProtoReflect.Descriptor instead.
func (*ListUniqueBeaconBadBlockValuesResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{45}
}

func (x *ListUniqueBeaconBadBlockValuesResponse) GetNode() []string {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListUniqueBeaconBadBlockValuesResponse) GetSlot() []uint64 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListUniqueBeaconBadBlockValuesResponse) GetEpoch() []uint64 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListUniqueBeaconBadBlockValuesResponse) GetBlockRoot() []string {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *ListUniqueBeaconBadBlockValuesResponse) GetNodeVersion() []string {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ListUniqueBeaconBadBlockValuesResponse) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ListUniqueBeaconBadBlockValuesResponse) GetNetwork() []string {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ListUniqueBeaconBadBlockValuesResponse) GetBeaconImplementation() []string {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type ListBeaconBadBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Slot                 uint64                 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                uint64                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            string                 `protobuf:"bytes,4,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          string                 `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network              string                 `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Before               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
	After                *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	Pagination           *PaginationCursor      `protobuf:"bytes,10,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id                   string                 `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	BeaconImplementation string                 `protobuf:"bytes,12,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *ListBeaconBadBlockRequest) Reset() {
	*x = ListBeaconBadBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeaconBadBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeaconBadBlockRequest) ProtoMessage() {}

func (x *ListBeaconBadBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeaconBadBlockRequest.ProtoReflect.Descriptor instead.
func (*ListBeaconBadBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{46}
}

func (x *ListBeaconBadBlockRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ListBeaconBadBlockRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ListBeaconBadBlockRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ListBeaconBadBlockRequest) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *ListBeaconBadBlockRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *ListBeaconBadBlockRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListBeaconBadBlockRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ListBeaconBadBlockRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ListBeaconBadBlockRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ListBeaconBadBlockRequest) GetPagination() *PaginationCursor {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListBeaconBadBlockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListBeaconBadBlockRequest) GetBeaconImplementation() string {
	if x != nil {
		return x.BeaconImplementation
	}
	return ""
}

type ListBeaconBadBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconBadBlocks []*BeaconBadBlock `protobuf:"bytes,1,rep,name=beacon_bad_blocks,json=beaconBadBlocks,proto3" json:"beacon_bad_blocks,omitempty"`
}

func (x *ListBeaconBadBlockResponse) Reset() {
	*x = ListBeaconBadBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeaconBadBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeaconBadBlockResponse) ProtoMessage() {}

func (x *ListBeaconBadBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeaconBadBlockResponse.ProtoReflect.Descriptor instead.
func (*ListBeaconBadBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{47}
}

func (x *ListBeaconBadBlockResponse) GetBeaconBadBlocks() []*BeaconBadBlock {
	if x != nil {
		return x.BeaconBadBlocks
	}
	return nil
}

type CountBeaconBadBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Slot                 uint64                 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                uint64                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            string                 `protobuf:"bytes,4,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          string                 `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network              string                 `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Before               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
	After                *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	BeaconImplementation string                 `protobuf:"bytes,10,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
	Id                   string                 `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CountBeaconBadBlockRequest) Reset() {
	*x = CountBeaconBadBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBeaconBadBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBeaconBadBlockRequest) ProtoMessage() {}

func (x *CountBeaconBadBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBeaconBadBlockRequest.ProtoReflect.Descriptor instead.
func (*CountBeaconBadBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{48}
}

func (x *CountBeaconBadBlockRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *CountBeaconBadBlockRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *CountBeaconBadBlockRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CountBeaconBadBlockRequest) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *CountBeaconBadBlockRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *CountBeaconBadBlockRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CountBeaconBadBlockRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CountBeaconBadBlockRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CountBeaconBadBlockRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CountBeaconBadBlockRequest) GetBeaconImplementation() string {
	if x != nil {
		return x.BeaconImplementation
	}
	return ""
}

func (x *CountBeaconBadBlockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CountBeaconBadBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountBeaconBadBlockResponse) Reset() {
	*x = CountBeaconBadBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBeaconBadBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBeaconBadBlockResponse) ProtoMessage() {}

func (x *CountBeaconBadBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBeaconBadBlockResponse.ProtoReflect.Descriptor instead.
func (*CountBeaconBadBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{49}
}

func (x *CountBeaconBadBlockResponse) GetCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ListUniqueBeaconBadBlobValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []ListUniqueBeaconBadBlobValuesRequest_Field `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=indexer.ListUniqueBeaconBadBlobValuesRequest_Field" json:"fields,omitempty"`
}

func (x *ListUniqueBeaconBadBlobValuesRequest) Reset() {
	*x = ListUniqueBeaconBadBlobValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueBeaconBadBlobValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueBeaconBadBlobValuesRequest) ProtoMessage() {}

func (x *ListUniqueBeaconBadBlobValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueBeaconBadBlobValuesRequest.ProtoReflect.Descriptor instead.
func (*ListUniqueBeaconBadBlobValuesRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{50}
}

func (x *ListUniqueBeaconBadBlobValuesRequest) GetFields() []ListUniqueBeaconBadBlobValuesRequest_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListUniqueBeaconBadBlobValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 []string `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	Slot                 []uint64 `protobuf:"varint,2,rep,packed,name=slot,proto3" json:"slot,omitempty"`
	Epoch                []uint64 `protobuf:"varint,3,rep,packed,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            []string `protobuf:"bytes,4,rep,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          []string `protobuf:"bytes,5,rep,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             []string `protobuf:"bytes,6,rep,name=location,proto3" json:"location,omitempty"`
	Network              []string `protobuf:"bytes,7,rep,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation []string `protobuf:"bytes,8,rep,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
	Index                []uint64 `protobuf:"varint,9,rep,packed,name=index,proto3" json:"index,omitempty"`
}

func (x *ListUniqueBeaconBadBlobValuesResponse) Reset() {
	*x = ListUniqueBeaconBadBlobValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueBeaconBadBlobValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueBeaconBadBlobValuesResponse) ProtoMessage() {}

func (x *ListUniqueBeaconBadBlobValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueBeaconBadBlobValuesResponse.ProtoReflect.Descriptor instead.
func (*ListUniqueBeaconBadBlobValuesResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{51}
}

func (x *ListUniqueBeaconBadBlobValuesResponse) GetNode() []string {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListUniqueBeaconBadBlobValuesResponse) GetSlot() []uint64 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListUniqueBeaconBadBlobValuesResponse) GetEpoch() []uint64 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListUniqueBeaconBadBlobValuesResponse) GetBlockRoot() []string {
	if x != nil {
		return x.BlockRoot
	}
	return nil
}

func (x *ListUniqueBeaconBadBlobValuesResponse) GetNodeVersion() []string {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ListUniqueBeaconBadBlobValuesResponse) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ListUniqueBeaconBadBlobValuesResponse) GetNetwork() []string {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ListUniqueBeaconBadBlobValuesResponse) GetBeaconImplementation() []string {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

func (x *ListUniqueBeaconBadBlobValuesResponse) GetIndex() []uint64 {
	if x != nil {
		return x.Index
	}
	return nil
}

type ListBeaconBadBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 string                  `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Slot                 uint64                  `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                uint64                  `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            string                  `protobuf:"bytes,4,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          string                  `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             string                  `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network              string                  `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Before               *timestamppb.Timestamp  `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
	After                *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	Pagination           *PaginationCursor       `protobuf:"bytes,10,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id                   string                  `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	BeaconImplementation string                  `protobuf:"bytes,12,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
	Index                *wrapperspb.UInt64Value `protobuf:"bytes,13,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ListBeaconBadBlobRequest) Reset() {
	*x = ListBeaconBadBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeaconBadBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeaconBadBlobRequest) ProtoMessage() {}

func (x *ListBeaconBadBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeaconBadBlobRequest.ProtoReflect.Descriptor instead.
func (*ListBeaconBadBlobRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{52}
}

func (x *ListBeaconBadBlobRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ListBeaconBadBlobRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ListBeaconBadBlobRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ListBeaconBadBlobRequest) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *ListBeaconBadBlobRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *ListBeaconBadBlobRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListBeaconBadBlobRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ListBeaconBadBlobRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ListBeaconBadBlobRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ListBeaconBadBlobRequest) GetPagination() *PaginationCursor {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListBeaconBadBlobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListBeaconBadBlobRequest) GetBeaconImplementation() string {
	if x != nil {
		return x.BeaconImplementation
	}
	return ""
}

func (x *ListBeaconBadBlobRequest) GetIndex() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Index
	}
	return nil
}

type ListBeaconBadBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconBadBlobs []*BeaconBadBlob `protobuf:"bytes,1,rep,name=beacon_bad_blobs,json=beaconBadBlobs,proto3" json:"beacon_bad_blobs,omitempty"`
}

func (x *ListBeaconBadBlobResponse) Reset() {
	*x = ListBeaconBadBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeaconBadBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeaconBadBlobResponse) ProtoMessage() {}

func (x *ListBeaconBadBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeaconBadBlobResponse.ProtoReflect.Descriptor instead.
func (*ListBeaconBadBlobResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{53}
}

func (x *ListBeaconBadBlobResponse) GetBeaconBadBlobs() []*BeaconBadBlob {
	if x != nil {
		return x.BeaconBadBlobs
	}
	return nil
}

type CountBeaconBadBlobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 string                  `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Slot                 uint64                  `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                uint64                  `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	BlockRoot            string                  `protobuf:"bytes,4,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	NodeVersion          string                  `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             string                  `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network              string                  `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Before               *timestamppb.Timestamp  `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
	After                *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	BeaconImplementation string                  `protobuf:"bytes,10,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
	Id                   string                  `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	Index                *wrapperspb.UInt64Value `protobuf:"bytes,12,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *CountBeaconBadBlobRequest) Reset() {
	*x = CountBeaconBadBlobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBeaconBadBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBeaconBadBlobRequest) ProtoMessage() {}

func (x *CountBeaconBadBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBeaconBadBlobRequest.ProtoReflect.Descriptor instead.
func (*CountBeaconBadBlobRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{54}
}

func (x *CountBeaconBadBlobRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *CountBeaconBadBlobRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *CountBeaconBadBlobRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CountBeaconBadBlobRequest) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *CountBeaconBadBlobRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *CountBeaconBadBlobRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CountBeaconBadBlobRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CountBeaconBadBlobRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CountBeaconBadBlobRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CountBeaconBadBlobRequest) GetBeaconImplementation() string {
	if x != nil {
		return x.BeaconImplementation
	}
	return ""
}

func (x *CountBeaconBadBlobRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CountBeaconBadBlobRequest) GetIndex() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Index
	}
	return nil
}

type CountBeaconBadBlobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountBeaconBadBlobResponse) Reset() {
	*x = CountBeaconBadBlobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBeaconBadBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBeaconBadBlobResponse) ProtoMessage() {}

func (x *CountBeaconBadBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBeaconBadBlobResponse.ProtoReflect.Descriptor instead.
func (*CountBeaconBadBlobResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{55}
}

func (x *CountBeaconBadBlobResponse) GetCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type PaginationCursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	OrderBy string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *PaginationCursor) Reset() {
	*x = PaginationCursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationCursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationCursor) ProtoMessage() {}

func (x *PaginationCursor) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationCursor.ProtoReflect.Descriptor instead.
func (*PaginationCursor) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{56}
}

func (x *PaginationCursor) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationCursor) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginationCursor) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type CreateExecutionBadBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt               *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	BlockHash               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Network                 *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	BlockExtraData          *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=block_extra_data,json=blockExtraData,proto3" json:"block_extra_data,omitempty"`
}

func (x *CreateExecutionBadBlockRequest) Reset() {
	*x = CreateExecutionBadBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExecutionBadBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExecutionBadBlockRequest) ProtoMessage() {}

func (x *CreateExecutionBadBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExecutionBadBlockRequest.ProtoReflect.Descriptor instead.
func (*CreateExecutionBadBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{57}
}

func (x *CreateExecutionBadBlockRequest) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetBlockHash() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetBlockNumber() *wrapperspb.Int64Value {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetExecutionImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetBlockExtraData() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockExtraData
	}
	return nil
}

type CreateExecutionBadBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateExecutionBadBlockResponse) Reset() {
	*x = CreateExecutionBadBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExecutionBadBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExecutionBadBlockResponse) ProtoMessage() {}

func (x *CreateExecutionBadBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExecutionBadBlockResponse.ProtoReflect.Descriptor instead.
func (*CreateExecutionBadBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{58}
}

func (x *CreateExecutionBadBlockResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type ListExecutionBadBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	BlockNumber             int64                  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash               string                 `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Location                string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Network                 string                 `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Before                  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=before,proto3" json:"before,omitempty"`
	After                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=after,proto3" json:"after,omitempty"`
	Pagination              *PaginationCursor      `protobuf:"bytes,8,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id                      string                 `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	ExecutionImplementation string                 `protobuf:"bytes,10,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             string                 `protobuf:"bytes,11,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	BlockExtraData          string                 `protobuf:"bytes,12,opt,name=block_extra_data,json=blockExtraData,proto3" json:"block_extra_data,omitempty"`
}

func (x *ListExecutionBadBlockRequest) Reset() {
	*x = ListExecutionBadBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExecutionBadBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionBadBlockRequest) ProtoMessage() {}

func (x *ListExecutionBadBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionBadBlockRequest.ProtoReflect.Descriptor instead.
func (*ListExecutionBadBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{59}
}

func (x *ListExecutionBadBlockRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ListExecutionBadBlockRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ListExecutionBadBlockRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ListExecutionBadBlockRequest) GetPagination() *PaginationCursor {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListExecutionBadBlockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetExecutionImplementation() string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetBlockExtraData() string {
	if x != nil {
		return x.BlockExtraData
	}
	return ""
}

type ListExecutionBadBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionBadBlocks []*ExecutionBadBlock `protobuf:"bytes,1,rep,name=execution_bad_blocks,json=executionBadBlocks,proto3" json:"execution_bad_blocks,omitempty"`
}

func (x *ListExecutionBadBlockResponse) Reset() {
	*x = ListExecutionBadBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExecutionBadBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionBadBlockResponse) ProtoMessage() {}

func (x *ListExecutionBadBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionBadBlockResponse.ProtoReflect.Descriptor instead.
func (*ListExecutionBadBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{60}
}

func (x *ListExecutionBadBlockResponse) GetExecutionBadBlocks() []*ExecutionBadBlock {
	if x != nil {
		return x.ExecutionBadBlocks
	}
	return nil
}

type CountExecutionBadBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	BlockNumber             int64                  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash               string                 `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Location                string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Network                 string                 `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Before                  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=before,proto3" json:"before,omitempty"`
	After                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=after,proto3" json:"after,omitempty"`
	ExecutionImplementation string                 `protobuf:"bytes,8,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             string                 `protobuf:"bytes,9,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	BlockExtraData          string                 `protobuf:"bytes,10,opt,name=block_extra_data,json=blockExtraData,proto3" json:"block_extra_data,omitempty"`
}

func (x *CountExecutionBadBlockRequest) Reset() {
	*x = CountExecutionBadBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountExecutionBadBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountExecutionBadBlockRequest) ProtoMessage() {}

func (x *CountExecutionBadBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountExecutionBadBlockRequest.ProtoReflect.Descriptor instead.
func (*CountExecutionBadBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{61}
}

func (x *CountExecutionBadBlockRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *CountExecutionBadBlockRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CountExecutionBadBlockRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CountExecutionBadBlockRequest) GetExecutionImplementation() string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetBlockExtraData() string {
	if x != nil {
		return x.BlockExtraData
	}
	return ""
}

type CountExecutionBadBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountExecutionBadBlockResponse) Reset() {
	*x = CountExecutionBadBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountExecutionBadBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountExecutionBadBlockResponse) ProtoMessage() {}

func (x *CountExecutionBadBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountExecutionBadBlockResponse.ProtoReflect.Descriptor instead.
func (*CountExecutionBadBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{62}
}

func (x *CountExecutionBadBlockResponse) GetCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ListUniqueExecutionBadBlockValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []ListUniqueExecutionBadBlockValuesRequest_Field `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=indexer.ListUniqueExecutionBadBlockValuesRequest_Field" json:"fields,omitempty"`
}

func (x *ListUniqueExecutionBadBlockValuesRequest) Reset() {
	*x = ListUniqueExecutionBadBlockValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueExecutionBadBlockValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueExecutionBadBlockValuesRequest) ProtoMessage() {}

func (x *ListUniqueExecutionBadBlockValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueExecutionBadBlockValuesRequest.ProtoReflect.Descriptor instead.
func (*ListUniqueExecutionBadBlockValuesRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{63}
}

func (x *ListUniqueExecutionBadBlockValuesRequest) GetFields() []ListUniqueExecutionBadBlockValuesRequest_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListUniqueExecutionBadBlockValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    []string `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	BlockHash               []string `protobuf:"bytes,2,rep,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             []int64  `protobuf:"varint,3,rep,packed,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                []string `protobuf:"bytes,4,rep,name=location,proto3" json:"location,omitempty"`
	Network                 []string `protobuf:"bytes,5,rep,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation []string `protobuf:"bytes,6,rep,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             []string `protobuf:"bytes,7,rep,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	ClientVersion           []string `protobuf:"bytes,8,rep,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	BlockExtraData          []string `protobuf:"bytes,9,rep,name=block_extra_data,json=blockExtraData,proto3" json:"block_extra_data,omitempty"`
}

func (x *ListUniqueExecutionBadBlockValuesResponse) Reset() {
	*x = ListUniqueExecutionBadBlockValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueExecutionBadBlockValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueExecutionBadBlockValuesResponse) ProtoMessage() {}

func (x *ListUniqueExecutionBadBlockValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueExecutionBadBlockValuesResponse.ProtoReflect.Descriptor instead.
func (*ListUniqueExecutionBadBlockValuesResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{64}
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetNode() []string {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetBlockHash() []string {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetBlockNumber() []int64 {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetNetwork() []string {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetExecutionImplementation() []string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetNodeVersion() []string {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetClientVersion() []string {
	if x != nil {
		return x.ClientVersion
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetBlockExtraData() []string {
	if x != nil {
		return x.BlockExtraData
	}
	return nil
}

var File_indexer_indexer_proto protoreflect.FileDescriptor

var file_indexer_indexer_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd1, 0x04, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x04, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x04, 0x0a, 0x0e, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3b, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a,
	0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x87, 0x05, 0x0a, 0x0d, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c,
	0x6f, 0x62, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12,
	0x32, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb9, 0x04, 0x0a, 0x13, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x57, 0x0a, 0x18,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xff, 0x04, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x57, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x9a, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x6f, 0x6c, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x63, 0x6c, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x47,
	0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x04, 0x6e, 0x63, 0x6c, 0x69, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x63, 0x6c, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6c, 0x63, 0x6c, 0x69, 0x12, 0x27, 0x0a, 0x04, 0x7a, 0x63,
	0x6c, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x5a, 0x63, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x7a,
	0x63, 0x6c, 0x69, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0x3e, 0x0a, 0x0a, 0x5a, 0x63, 0x6c, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a,
	0x04, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x22,
	0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x4b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x38,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb0, 0x04, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb0, 0x04, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xb3, 0x04, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe6, 0x04, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x4b, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0x98,
	0x04, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x57, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbb, 0x03, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x18,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x14, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x22, 0xf1, 0x02, 0x0a, 0x1f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x94, 0x02,
	0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x92, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44,
	0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x53,
	0x48, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4d,
	0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x07, 0x22, 0xbe, 0x02, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x39, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x7e, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4c,
	0x4f, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x22, 0x90, 0x02, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x03, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x54, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0xfa, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x18, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x7e, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4c, 0x4f,
	0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x42,
	0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x22, 0x90, 0x02, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x03, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x54, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xfa, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x18, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xf5, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x7e, 0x0a, 0x05, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x50, 0x4f, 0x43,
	0x48, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x4f,
	0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x22, 0x93, 0x02, 0x0a, 0x26,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x33, 0x0a, 0x15,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb7, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x1a, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0f, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xfd,
	0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51,
	0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xff, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x4c, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x06, 0x12, 0x19, 0x0a,
	0x15, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x10, 0x08, 0x22, 0xa8, 0x02, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xea,
	0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5d, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x0e, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x22, 0xb0, 0x03, 0x0a, 0x19, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32,
	0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x50, 0x0a,
	0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5b, 0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xde, 0x04, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x57, 0x0a, 0x18, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe3,
	0x03, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x18,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x22, 0x99, 0x03, 0x0a, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x54, 0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x08, 0x22, 0xe6,
	0x02, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x32, 0xf8, 0x15, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x19, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x21,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x12,
	0x23, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x62, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62,
	0x12, 0x22, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x27, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x18, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x33, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x6f, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x72, 0x61, 0x63, 0x6f, 0x6f, 0x72, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indexer_indexer_proto_rawDescOnce sync.Once
	file_indexer_indexer_proto_rawDescData = file_indexer_indexer_proto_rawDesc
)

func file_indexer_indexer_proto_rawDescGZIP() []byte {
	file_indexer_indexer_proto_rawDescOnce.Do(func() {
		file_indexer_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(file_indexer_indexer_proto_rawDescData)
	})
	return file_indexer_indexer_proto_rawDescData
}

var file_indexer_indexer_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_indexer_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 65)
var file_indexer_indexer_proto_goTypes = []interface{}{
	(ListUniqueExecutionBlockTraceValuesRequest_Field)(0), // 0: indexer.ListUniqueExecutionBlockTraceValuesRequest.Field
	(ListUniqueBeaconStateValuesRequest_Field)(0),         // 1: indexer.ListUniqueBeaconStateValuesRequest.Field
	(ListUniqueBeaconBlockValuesRequest_Field)(0),         // 2: indexer.ListUniqueBeaconBlockValuesRequest.Field
	(ListUniqueBeaconBadBlockValuesRequest_Field)(0),      // 3: indexer.ListUniqueBeaconBadBlockValuesRequest.Field
	(ListUniqueBeaconBadBlobValuesRequest_Field)(0),       // 4: indexer.ListUniqueBeaconBadBlobValuesRequest.Field
	(ListUniqueExecutionBadBlockValuesRequest_Field)(0),   // 5: indexer.ListUniqueExecutionBadBlockValuesRequest.Field
	(*BeaconState)(nil),                                 // 6: indexer.BeaconState
	(*BeaconBlock)(nil),                                 // 7: indexer.BeaconBlock
	(*BeaconBadBlock)(nil),                              // 8: indexer.BeaconBadBlock
	(*BeaconBadBlob)(nil),                               // 9: indexer.BeaconBadBlob
	(*ExecutionBlockTrace)(nil),                         // 10: indexer.ExecutionBlockTrace
	(*ExecutionBadBlock)(nil),                           // 11: indexer.ExecutionBadBlock
	(*Config)(nil),                                      // 12: indexer.Config
	(*EthereumConfig)(nil),                              // 13: indexer.EthereumConfig
	(*EthereumNetworkConfig)(nil),                       // 14: indexer.EthereumNetworkConfig
	(*ToolsConfig)(nil),                                 // 15: indexer.ToolsConfig
	(*GitRepositoryConfig)(nil),                         // 16: indexer.GitRepositoryConfig
	(*ZcliConfig)(nil),                                  // 17: indexer.ZcliConfig
	(*GetConfigRequest)(nil),                            // 18: indexer.GetConfigRequest
	(*GetConfigResponse)(nil),                           // 19: indexer.GetConfigResponse
	(*GetStorageHandshakeTokenRequest)(nil),             // 20: indexer.GetStorageHandshakeTokenRequest
	(*GetStorageHandshakeTokenResponse)(nil),            // 21: indexer.GetStorageHandshakeTokenResponse
	(*CreateBeaconStateRequest)(nil),                    // 22: indexer.CreateBeaconStateRequest
	(*CreateBeaconStateResponse)(nil),                   // 23: indexer.CreateBeaconStateResponse
	(*CreateBeaconBlockRequest)(nil),                    // 24: indexer.CreateBeaconBlockRequest
	(*CreateBeaconBlockResponse)(nil),                   // 25: indexer.CreateBeaconBlockResponse
	(*CreateBeaconBadBlockRequest)(nil),                 // 26: indexer.CreateBeaconBadBlockRequest
	(*CreateBeaconBadBlockResponse)(nil),                // 27: indexer.CreateBeaconBadBlockResponse
	(*CreateBeaconBadBlobRequest)(nil),                  // 28: indexer.CreateBeaconBadBlobRequest
	(*CreateBeaconBadBlobResponse)(nil),                 // 29: indexer.CreateBeaconBadBlobResponse
	(*CreateExecutionBlockTraceRequest)(nil),            // 30: indexer.CreateExecutionBlockTraceRequest
	(*CreateExecutionBlockTraceResponse)(nil),           // 31: indexer.CreateExecutionBlockTraceResponse
	(*ListExecutionBlockTraceRequest)(nil),              // 32: indexer.ListExecutionBlockTraceRequest
	(*ListExecutionBlockTraceResponse)(nil),             // 33: indexer.ListExecutionBlockTraceResponse
	(*CountExecutionBlockTraceRequest)(nil),             // 34: indexer.CountExecutionBlockTraceRequest
	(*CountExecutionBlockTraceResponse)(nil),            // 35: indexer.CountExecutionBlockTraceResponse
	(*ListUniqueExecutionBlockTraceValuesRequest)(nil),  // 36: indexer.ListUniqueExecutionBlockTraceValuesRequest
	(*ListUniqueExecutionBlockTraceValuesResponse)(nil), // 37: indexer.ListUniqueExecutionBlockTraceValuesResponse
	(*ListUniqueBeaconStateValuesRequest)(nil),          // 38: indexer.ListUniqueBeaconStateValuesRequest
	(*ListUniqueBeaconStateValuesResponse)(nil),         // 39: indexer.ListUniqueBeaconStateValuesResponse
	(*ListBeaconStateRequest)(nil),                      // 40: indexer.ListBeaconStateRequest
	(*ListBeaconStateResponse)(nil),                     // 41: indexer.ListBeaconStateResponse
	(*CountBeaconStateRequest)(nil),                     // 42: indexer.CountBeaconStateRequest
	(*CountBeaconStateResponse)(nil),                    // 43: indexer.CountBeaconStateResponse
	(*ListUniqueBeaconBlockValuesRequest)(nil),          // 44: indexer.ListUniqueBeaconBlockValuesRequest
	(*ListUniqueBeaconBlockValuesResponse)(nil),         // 45: indexer.ListUniqueBeaconBlockValuesResponse
	(*ListBeaconBlockRequest)(nil),                      // 46: indexer.ListBeaconBlockRequest
	(*ListBeaconBlockResponse)(nil),                     // 47: indexer.ListBeaconBlockResponse
	(*CountBeaconBlockRequest)(nil),                     // 48: indexer.CountBeaconBlockRequest
	(*CountBeaconBlockResponse)(nil),                    // 49: indexer.CountBeaconBlockResponse
	(*ListUniqueBeaconBadBlockValuesRequest)(nil),       // 50: indexer.ListUniqueBeaconBadBlockValuesRequest
	(*ListUniqueBeaconBadBlockValuesResponse)(nil),      // 51: indexer.ListUniqueBeaconBadBlockValuesResponse
	(*ListBeaconBadBlockRequest)(nil),                   // 52: indexer.ListBeaconBadBlockRequest
	(*ListBeaconBadBlockResponse)(nil),                  // 53: indexer.ListBeaconBadBlockResponse
	(*CountBeaconBadBlockRequest)(nil),                  // 54: indexer.CountBeaconBadBlockRequest
	(*CountBeaconBadBlockResponse)(nil),                 // 55: indexer.CountBeaconBadBlockResponse
	(*ListUniqueBeaconBadBlobValuesRequest)(nil),        // 56: indexer.ListUniqueBeaconBadBlobValuesRequest
	(*ListUniqueBeaconBadBlobValuesResponse)(nil),       // 57: indexer.ListUniqueBeaconBadBlobValuesResponse
	(*ListBeaconBadBlobRequest)(nil),                    // 58: indexer.ListBeaconBadBlobRequest
	(*ListBeaconBadBlobResponse)(nil),                   // 59: indexer.ListBeaconBadBlobResponse
	(*CountBeaconBadBlobRequest)(nil),                   // 60: indexer.CountBeaconBadBlobRequest
	(*CountBeaconBadBlobResponse)(nil),                  // 61: indexer.CountBeaconBadBlobResponse
	(*PaginationCursor)(nil),                            // 62: indexer.PaginationCursor
	(*CreateExecutionBadBlockRequest)(nil),              // 63: indexer.CreateExecutionBadBlockRequest
	(*CreateExecutionBadBlockResponse)(nil),             // 64: indexer.CreateExecutionBadBlockResponse
	(*ListExecutionBadBlockRequest)(nil),                // 65: indexer.ListExecutionBadBlockRequest
	(*ListExecutionBadBlockResponse)(nil),               // 66: indexer.ListExecutionBadBlockResponse
	(*CountExecutionBadBlockRequest)(nil),               // 67: indexer.CountExecutionBadBlockRequest
	(*CountExecutionBadBlockResponse)(nil),              // 68: indexer.CountExecutionBadBlockResponse
	(*ListUniqueExecutionBadBlockValuesRequest)(nil),    // 69: indexer.ListUniqueExecutionBadBlockValuesRequest
	(*ListUniqueExecutionBadBlockValuesResponse)(nil),   // 70: indexer.ListUniqueExecutionBadBlockValuesResponse
	(*wrapperspb.StringValue)(nil),                      // 71: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                       // 72: google.protobuf.Timestamp
	(*wrapperspb.UInt64Value)(nil),                      // 73: google.protobuf.UInt64Value
	(*wrapperspb.Int64Value)(nil),                       // 74: google.protobuf.Int64Value
}
var file_indexer_indexer_proto_depIdxs = []int32{
	71,  // 0: indexer.BeaconState.id:type_name -> google.protobuf.StringValue
	71,  // 1: indexer.BeaconState.node:type_name -> google.protobuf.StringValue
	72,  // 2: indexer.BeaconState.fetched_at:type_name -> google.protobuf.Timestamp
	73,  // 3: indexer.BeaconState.slot:type_name -> google.protobuf.UInt64Value
	73,  // 4: indexer.BeaconState.epoch:type_name -> google.protobuf.UInt64Value
	71,  // 5: indexer.BeaconState.state_root:type_name -> google.protobuf.StringValue
	71,  // 6: indexer.BeaconState.node_version:type_name -> google.protobuf.StringValue
	71,  // 7: indexer.BeaconState.location:type_name -> google.protobuf.StringValue
	71,  // 8: indexer.BeaconState.network:type_name -> google.protobuf.StringValue
	71,  // 9: indexer.BeaconState.beacon_implementation:type_name -> google.protobuf.StringValue
	71,  // 10: indexer.BeaconBlock.id:type_name -> google.protobuf.StringValue
	71,  // 11: indexer.BeaconBlock.node:type_name -> google.protobuf.StringValue
	72,  // 12: indexer.BeaconBlock.fetched_at:type_name -> google.protobuf.Timestamp
	73,  // 13: indexer.BeaconBlock.slot:type_name -> google.protobuf.UInt64Value
	73,  // 14: indexer.BeaconBlock.epoch:type_name -> google.protobuf.UInt64Value
	71,  // 15: indexer.BeaconBlock.block_root:type_name -> google.protobuf.StringValue
	71,  // 16: indexer.BeaconBlock.node_version:type_name -> google.protobuf.StringValue
	71,  // 17: indexer.BeaconBlock.location:type_name -> google.protobuf.StringValue
	71,  // 18: indexer.BeaconBlock.network:type_name -> google.protobuf.StringValue
	71,  // 19: indexer.BeaconBlock.beacon_implementation:type_name -> google.protobuf.StringValue
	71,  // 20: indexer.BeaconBadBlock.id:type_name -> google.protobuf.StringValue
	71,  // 21: indexer.BeaconBadBlock.node:type_name -> google.protobuf.StringValue
	72,  // 22: indexer.BeaconBadBlock.fetched_at:type_name -> google.protobuf.Timestamp
	73,  // 23: indexer.BeaconBadBlock.slot:type_name -> google.protobuf.UInt64Value
	73,  // 24: indexer.BeaconBadBlock.epoch:type_name -> google.protobuf.UInt64Value
	71,  // 25: indexer.BeaconBadBlock.block_root:type_name -> google.protobuf.StringValue
	71,  // 26: indexer.BeaconBadBlock.node_version:type_name -> google.protobuf.StringValue
	71,  // 27: indexer.BeaconBadBlock.location:type_name -> google.protobuf.StringValue
	71,  // 28: indexer.BeaconBadBlock.network:type_name -> google.protobuf.StringValue
	71,  // 29: indexer.BeaconBadBlock.beacon_implementation:type_name -> google.protobuf.StringValue
	71,  // 30: indexer.BeaconBadBlob.id:type_name -> google.protobuf.StringValue
	71,  // 31: indexer.BeaconBadBlob.node:type_name -> google.protobuf.StringValue
	72,  // 32: indexer.BeaconBadBlob.fetched_at:type_name -> google.protobuf.Timestamp
	73,  // 33: indexer.BeaconBadBlob.slot:type_name -> google.protobuf.UInt64Value
	73,  // 34: indexer.BeaconBadBlob.epoch:type_name -> google.protobuf.UInt64Value
	71,  // 35: indexer.BeaconBadBlob.block_root:type_name -> google.protobuf.StringValue
	71,  // 36: indexer.BeaconBadBlob.node_version:type_name -> google.protobuf.StringValue
	71,  // 37: indexer.BeaconBadBlob.location:type_name -> google.protobuf.StringValue
	71,  // 38: indexer.BeaconBadBlob.network:type_name -> google.protobuf.StringValue
	71,  // 39: indexer.BeaconBadBlob.beacon_implementation:type_name -> google.protobuf.StringValue
	73,  // 40: indexer.BeaconBadBlob.index:type_name -> google.protobuf.UInt64Value
	71,  // 41: indexer.ExecutionBlockTrace.id:type_name -> google.protobuf.StringValue
	71,  // 42: indexer.ExecutionBlockTrace.node:type_name -> google.protobuf.StringValue
	72,  // 43: indexer.ExecutionBlockTrace.fetched_at:type_name -> google.protobuf.Timestamp
	71,  // 44: indexer.ExecutionBlockTrace.block_hash:type_name -> google.protobuf.StringValue
	74,  // 45: indexer.ExecutionBlockTrace.block_number:type_name -> google.protobuf.Int64Value
	71,  // 46: indexer.ExecutionBlockTrace.location:type_name -> google.protobuf.StringValue
	71,  // 47: indexer.ExecutionBlockTrace.network:type_name -> google.protobuf.StringValue
	71,  // 48: indexer.ExecutionBlockTrace.execution_implementation:type_name -> google.protobuf.StringValue
	71,  // 49: indexer.ExecutionBlockTrace.node_version:type_name -> google.protobuf.StringValue
	71,  // 50: indexer.ExecutionBadBlock.id:type_name -> google.protobuf.StringValue
	71,  // 51: indexer.ExecutionBadBlock.node:type_name -> google.protobuf.StringValue
	72,  // 52: indexer.ExecutionBadBlock.fetched_at:type_name -> google.protobuf.Timestamp
	71,  // 53: indexer.ExecutionBadBlock.block_hash:type_name -> google.protobuf.StringValue
	74,  // 54: indexer.ExecutionBadBlock.block_number:type_name -> google.protobuf.Int64Value
	71,  // 55: indexer.ExecutionBadBlock.location:type_name -> google.protobuf.StringValue
	71,  // 56: indexer.ExecutionBadBlock.network:type_name -> google.protobuf.StringValue
	71,  // 57: indexer.ExecutionBadBlock.execution_implementation:type_name -> google.protobuf.StringValue
	71,  // 58: indexer.ExecutionBadBlock.node_version:type_name -> google.protobuf.StringValue
	71,  // 59: indexer.ExecutionBadBlock.block_extra_data:type_name -> google.protobuf.StringValue
	13,  // 60: indexer.Config.ethereum:type_name -> indexer.EthereumConfig
	71,  // 61: indexer.EthereumConfig.network:type_name -> google.protobuf.StringValue
	14,  // 62: indexer.EthereumConfig.config:type_name -> indexer.EthereumNetworkConfig
	15,  // 63: indexer.EthereumConfig.tools:type_name -> indexer.ToolsConfig
	71,  // 64: indexer.EthereumNetworkConfig.repository:type_name -> google.protobuf.StringValue
	71,  // 65: indexer.EthereumNetworkConfig.branch:type_name -> google.protobuf.StringValue
	71,  // 66: indexer.EthereumNetworkConfig.path:type_name -> google.protobuf.StringValue
	16,  // 67: indexer.ToolsConfig.ncli:type_name -> indexer.GitRepositoryConfig
	16,  // 68: indexer.ToolsConfig.lcli:type_name -> indexer.GitRepositoryConfig
	17,  // 69: indexer.ToolsConfig.zcli:type_name -> indexer.ZcliConfig
	71,  // 70: indexer.GitRepositoryConfig.repository:type_name -> google.protobuf.StringValue
	71,  // 71: indexer.GitRepositoryConfig.branch:type_name -> google.protobuf.StringValue
	71,  // 72: indexer.ZcliConfig.fork:type_name -> google.protobuf.StringValue
	12,  // 73: indexer.GetConfigResponse.config:type_name -> indexer.Config
	71,  // 74: indexer.CreateBeaconStateRequest.node:type_name -> google.protobuf.StringValue
	72,  // 75: indexer.CreateBeaconStateRequest.fetched_at:type_name -> google.protobuf.Timestamp
	73,  // 76: indexer.CreateBeaconStateRequest.slot:type_name -> google.protobuf.UInt64Value
	73,  // 77: indexer.CreateBeaconStateRequest.epoch:type_name -> google.protobuf.UInt64Value
	71,  // 78: indexer.CreateBeaconStateRequest.state_root:type_name -> google.protobuf.StringValue
	71,  // 79: indexer.CreateBeaconStateRequest.node_version:type_name -> google.protobuf.StringValue
	71,  // 80: indexer.CreateBeaconStateRequest.location:type_name -> google.protobuf.StringValue
	71,  // 81: indexer.CreateBeaconStateRequest.network:type_name -> google.protobuf.StringValue
	71,  // 82: indexer.CreateBeaconStateRequest.beacon_implementation:type_name -> google.protobuf.StringValue
	71,  // 83: indexer.CreateBeaconStateResponse.id:type_name -> google.protobuf.StringValue
	71,  // 84: indexer.CreateBeaconBlockRequest.node:type_name -> google.protobuf.StringValue
	72,  // 85: indexer.CreateBeaconBlockRequest.fetched_at:type_name -> google.protobuf.Timestamp
	73,  // 86: indexer.CreateBeaconBlockRequest.slot:type_name -> google.protobuf.UInt64Value
	73,  // 87: indexer.CreateBeaconBlockRequest.epoch:type_name -> google.protobuf.UInt64Value
	71,  // 88: indexer.CreateBeaconBlockRequest.block_root:type_name -> google.protobuf.StringValue
	71,  // 89: indexer.CreateBeaconBlockRequest.node_version:type_name -> google.protobuf.StringValue
	71,  // 90: indexer.CreateBeaconBlockRequest.location:type_name -> google.protobuf.StringValue
	71,  // 91: indexer.CreateBeaconBlockRequest.network:type_name -> google.protobuf.StringValue
	71,  // 92: indexer.CreateBeaconBlockRequest.beacon_implementation:type_name -> google.protobuf.StringValue
	71,  // 93: indexer.CreateBeaconBlockResponse.id:type_name -> google.protobuf.StringValue
	71,  // 94: indexer.CreateBeaconBadBlockRequest.node:type_name -> google.protobuf.StringValue
	72,  // 95: indexer.CreateBeaconBadBlockRequest.fetched_at:type_name -> google.protobuf.Timestamp
	73,  // 96: indexer.CreateBeaconBadBlockRequest.slot:type_name -> google.protobuf.UInt64Value
	73,  // 97: indexer.CreateBeaconBadBlockRequest.epoch:type_name -> google.protobuf.UInt64Value
	71,  // 98: indexer.CreateBeaconBadBlockRequest.block_root:type_name -> google.protobuf.StringValue
	71,  // 99: indexer.CreateBeaconBadBlockRequest.node_version:type_name -> google.protobuf.StringValue
	71,  // 100: indexer.CreateBeaconBadBlockRequest.location:type_name -> google.protobuf.StringValue
	71,  // 101: indexer.CreateBeaconBadBlockRequest.network:type_name -> google.protobuf.StringValue
	71,  // 102: indexer.CreateBeaconBadBlockRequest.beacon_implementation:type_name -> google.protobuf.StringValue
	71,  // 103: indexer.CreateBeaconBadBlockResponse.id:type_name -> google.protobuf.StringValue
	71,  // 104: indexer.CreateBeaconBadBlobRequest.node:type_name -> google.protobuf.StringValue
	72,  // 105: indexer.CreateBeaconBadBlobRequest.fetched_at:type_name -> google.protobuf.Timestamp
	73,  // 106: indexer.CreateBeaconBadBlobRequest.slot:type_name -> google.protobuf.UInt64Value
	73,  // 107: indexer.CreateBeaconBadBlobRequest.epoch:type_name -> google.protobuf.UInt64Value
	71,  // 108: indexer.CreateBeaconBadBlobRequest.block_root:type_name -> google.protobuf.StringValue
	71,  // 109: indexer.CreateBeaconBadBlobRequest.node_version:type_name -> google.protobuf.StringValue
	71,  // 110: indexer.CreateBeaconBadBlobRequest.location:type_name -> google.protobuf.StringValue
	71,  // 111: indexer.CreateBeaconBadBlobRequest.network:type_name -> google.protobuf.StringValue
	71,  // 112: indexer.CreateBeaconBadBlobRequest.beacon_implementation:type_name -> google.protobuf.StringValue
	73,  // 113: indexer.CreateBeaconBadBlobRequest.index:type_name -> google.protobuf.UInt64Value
	71,  // 114: indexer.CreateBeaconBadBlobResponse.id:type_name -> google.protobuf.StringValue
	71,  // 115: indexer.CreateExecutionBlockTraceRequest.node:type_name -> google.protobuf.StringValue
	72,  // 116: indexer.CreateExecutionBlockTraceRequest.fetched_at:type_name -> google.protobuf.Timestamp
	71,  // 117: indexer.CreateExecutionBlockTraceRequest.block_hash:type_name -> google.protobuf.StringValue
	74,  // 118: indexer.CreateExecutionBlockTraceRequest.block_number:type_name -> google.protobuf.Int64Value
	71,  // 119: indexer.CreateExecutionBlockTraceRequest.location:type_name -> google.protobuf.StringValue
	71,  // 120: indexer.CreateExecutionBlockTraceRequest.network:type_name -> google.protobuf.StringValue
	71,  // 121: indexer.CreateExecutionBlockTraceRequest.execution_implementation:type_name -> google.protobuf.StringValue
	71,  // 122: indexer.CreateExecutionBlockTraceRequest.node_version:type_name -> google.protobuf.StringValue
	71,  // 123: indexer.CreateExecutionBlockTraceResponse.id:type_name -> google.protobuf.StringValue
	72,  // 124: indexer.ListExecutionBlockTraceRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 125: indexer.ListExecutionBlockTraceRequest.after:type_name -> google.protobuf.Timestamp
	62,  // 126: indexer.ListExecutionBlockTraceRequest.pagination:type_name -> indexer.PaginationCursor
	10,  // 127: indexer.ListExecutionBlockTraceResponse.execution_block_traces:type_name -> indexer.ExecutionBlockTrace
	72,  // 128: indexer.CountExecutionBlockTraceRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 129: indexer.CountExecutionBlockTraceRequest.after:type_name -> google.protobuf.Timestamp
	73,  // 130: indexer.CountExecutionBlockTraceResponse.count:type_name -> google.protobuf.UInt64Value
	0,   // 131: indexer.ListUniqueExecutionBlockTraceValuesRequest.fields:type_name -> indexer.ListUniqueExecutionBlockTraceValuesRequest.Field
	1,   // 132: indexer.ListUniqueBeaconStateValuesRequest.fields:type_name -> indexer.ListUniqueBeaconStateValuesRequest.Field
	72,  // 133: indexer.ListBeaconStateRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 134: indexer.ListBeaconStateRequest.after:type_name -> google.protobuf.Timestamp
	62,  // 135: indexer.ListBeaconStateRequest.pagination:type_name -> indexer.PaginationCursor
	6,   // 136: indexer.ListBeaconStateResponse.beacon_states:type_name -> indexer.BeaconState
	72,  // 137: indexer.CountBeaconStateRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 138: indexer.CountBeaconStateRequest.after:type_name -> google.protobuf.Timestamp
	73,  // 139: indexer.CountBeaconStateResponse.count:type_name -> google.protobuf.UInt64Value
	2,   // 140: indexer.ListUniqueBeaconBlockValuesRequest.fields:type_name -> indexer.ListUniqueBeaconBlockValuesRequest.Field
	72,  // 141: indexer.ListBeaconBlockRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 142: indexer.ListBeaconBlockRequest.after:type_name -> google.protobuf.Timestamp
	62,  // 143: indexer.ListBeaconBlockRequest.pagination:type_name -> indexer.PaginationCursor
	7,   // 144: indexer.ListBeaconBlockResponse.beacon_blocks:type_name -> indexer.BeaconBlock
	72,  // 145: indexer.CountBeaconBlockRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 146: indexer.CountBeaconBlockRequest.after:type_name -> google.protobuf.Timestamp
	73,  // 147: indexer.CountBeaconBlockResponse.count:type_name -> google.protobuf.UInt64Value
	3,   // 148: indexer.ListUniqueBeaconBadBlockValuesRequest.fields:type_name -> indexer.ListUniqueBeaconBadBlockValuesRequest.Field
	72,  // 149: indexer.ListBeaconBadBlockRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 150: indexer.ListBeaconBadBlockRequest.after:type_name -> google.protobuf.Timestamp
	62,  // 151: indexer.ListBeaconBadBlockRequest.pagination:type_name -> indexer.PaginationCursor
	8,   // 152: indexer.ListBeaconBadBlockResponse.beacon_bad_blocks:type_name -> indexer.BeaconBadBlock
	72,  // 153: indexer.CountBeaconBadBlockRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 154: indexer.CountBeaconBadBlockRequest.after:type_name -> google.protobuf.Timestamp
	73,  // 155: indexer.CountBeaconBadBlockResponse.count:type_name -> google.protobuf.UInt64Value
	4,   // 156: indexer.ListUniqueBeaconBadBlobValuesRequest.fields:type_name -> indexer.ListUniqueBeaconBadBlobValuesRequest.Field
	72,  // 157: indexer.ListBeaconBadBlobRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 158: indexer.ListBeaconBadBlobRequest.after:type_name -> google.protobuf.Timestamp
	62,  // 159: indexer.ListBeaconBadBlobRequest.pagination:type_name -> indexer.PaginationCursor
	73,  // 160: indexer.ListBeaconBadBlobRequest.index:type_name -> google.protobuf.UInt64Value
	9,   // 161: indexer.ListBeaconBadBlobResponse.beacon_bad_blobs:type_name -> indexer.BeaconBadBlob
	72,  // 162: indexer.CountBeaconBadBlobRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 163: indexer.CountBeaconBadBlobRequest.after:type_name -> google.protobuf.Timestamp
	73,  // 164: indexer.CountBeaconBadBlobRequest.index:type_name -> google.protobuf.UInt64Value
	73,  // 165: indexer.CountBeaconBadBlobResponse.count:type_name -> google.protobuf.UInt64Value
	71,  // 166: indexer.CreateExecutionBadBlockRequest.node:type_name -> google.protobuf.StringValue
	72,  // 167: indexer.CreateExecutionBadBlockRequest.fetched_at:type_name -> google.protobuf.Timestamp
	71,  // 168: indexer.CreateExecutionBadBlockRequest.block_hash:type_name -> google.protobuf.StringValue
	74,  // 169: indexer.CreateExecutionBadBlockRequest.block_number:type_name -> google.protobuf.Int64Value
	71,  // 170: indexer.CreateExecutionBadBlockRequest.location:type_name -> google.protobuf.StringValue
	71,  // 171: indexer.CreateExecutionBadBlockRequest.network:type_name -> google.protobuf.StringValue
	71,  // 172: indexer.CreateExecutionBadBlockRequest.execution_implementation:type_name -> google.protobuf.StringValue
	71,  // 173: indexer.CreateExecutionBadBlockRequest.node_version:type_name -> google.protobuf.StringValue
	71,  // 174: indexer.CreateExecutionBadBlockRequest.block_extra_data:type_name -> google.protobuf.StringValue
	71,  // 175: indexer.CreateExecutionBadBlockResponse.id:type_name -> google.protobuf.StringValue
	72,  // 176: indexer.ListExecutionBadBlockRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 177: indexer.ListExecutionBadBlockRequest.after:type_name -> google.protobuf.Timestamp
	62,  // 178: indexer.ListExecutionBadBlockRequest.pagination:type_name -> indexer.PaginationCursor
	11,  // 179: indexer.ListExecutionBadBlockResponse.execution_bad_blocks:type_name -> indexer.ExecutionBadBlock
	72,  // 180: indexer.CountExecutionBadBlockRequest.before:type_name -> google.protobuf.Timestamp
	72,  // 181: indexer.CountExecutionBadBlockRequest.after:type_name -> google.protobuf.Timestamp
	73,  // 182: indexer.CountExecutionBadBlockResponse.count:type_name -> google.protobuf.UInt64Value
	5,   // 183: indexer.ListUniqueExecutionBadBlockValuesRequest.fields:type_name -> indexer.ListUniqueExecutionBadBlockValuesRequest.Field
	18,  // 184: indexer.Indexer.GetConfig:input_type -> indexer.GetConfigRequest
	20,  // 185: indexer.Indexer.GetStorageHandshakeToken:input_type -> indexer.GetStorageHandshakeTokenRequest
	22,  // 186: indexer.Indexer.CreateBeaconState:input_type -> indexer.CreateBeaconStateRequest
	40,  // 187: indexer.Indexer.ListBeaconState:input_type -> indexer.ListBeaconStateRequest
	42,  // 188: indexer.Indexer.CountBeaconState:input_type -> indexer.CountBeaconStateRequest
	38,  // 189: indexer.Indexer.ListUniqueBeaconStateValues:input_type -> indexer.ListUniqueBeaconStateValuesRequest
	24,  // 190: indexer.Indexer.CreateBeaconBlock:input_type -> indexer.CreateBeaconBlockRequest
	46,  // 191: indexer.Indexer.ListBeaconBlock:input_type -> indexer.ListBeaconBlockRequest
	48,  // 192: indexer.Indexer.CountBeaconBlock:input_type -> indexer.CountBeaconBlockRequest
	44,  // 193: indexer.Indexer.ListUniqueBeaconBlockValues:input_type -> indexer.ListUniqueBeaconBlockValuesRequest
	26,  // 194: indexer.Indexer.CreateBeaconBadBlock:input_type -> indexer.CreateBeaconBadBlockRequest
	52,  // 195: indexer.Indexer.ListBeaconBadBlock:input_type -> indexer.ListBeaconBadBlockRequest
	54,  // 196: indexer.Indexer.CountBeaconBadBlock:input_type -> indexer.CountBeaconBadBlockRequest
	50,  // 197: indexer.Indexer.ListUniqueBeaconBadBlockValues:input_type -> indexer.ListUniqueBeaconBadBlockValuesRequest
	28,  // 198: indexer.Indexer.CreateBeaconBadBlob:input_type -> indexer.CreateBeaconBadBlobRequest
	58,  // 199: indexer.Indexer.ListBeaconBadBlob:input_type -> indexer.ListBeaconBadBlobRequest
	60,  // 200: indexer.Indexer.CountBeaconBadBlob:input_type -> indexer.CountBeaconBadBlobRequest
	56,  // 201: indexer.Indexer.ListUniqueBeaconBadBlobValues:input_type -> indexer.ListUniqueBeaconBadBlobValuesRequest
	30,  // 202: indexer.Indexer.CreateExecutionBlockTrace:input_type -> indexer.CreateExecutionBlockTraceRequest
	32,  // 203: indexer.Indexer.ListExecutionBlockTrace:input_type -> indexer.ListExecutionBlockTraceRequest
	34,  // 204: indexer.Indexer.CountExecutionBlockTrace:input_type -> indexer.CountExecutionBlockTraceRequest
	36,  // 205: indexer.Indexer.ListUniqueExecutionBlockTraceValues:input_type -> indexer.ListUniqueExecutionBlockTraceValuesRequest
	63,  // 206: indexer.Indexer.CreateExecutionBadBlock:input_type -> indexer.CreateExecutionBadBlockRequest
	65,  // 207: indexer.Indexer.ListExecutionBadBlock:input_type -> indexer.ListExecutionBadBlockRequest
	67,  // 208: indexer.Indexer.CountExecutionBadBlock:input_type -> indexer.CountExecutionBadBlockRequest
	69,  // 209: indexer.Indexer.ListUniqueExecutionBadBlockValues:input_type -> indexer.ListUniqueExecutionBadBlockValuesRequest
	19,  // 210: indexer.Indexer.GetConfig:output_type -> indexer.GetConfigResponse
	21,  // 211: indexer.Indexer.GetStorageHandshakeToken:output_type -> indexer.GetStorageHandshakeTokenResponse
	23,  // 212: indexer.Indexer.CreateBeaconState:output_type -> indexer.CreateBeaconStateResponse
	41,  // 213: indexer.Indexer.ListBeaconState:output_type -> indexer.ListBeaconStateResponse
	43,  // 214: indexer.Indexer.CountBeaconState:output_type -> indexer.CountBeaconStateResponse
	39,  // 215: indexer.Indexer.ListUniqueBeaconStateValues:output_type -> indexer.ListUniqueBeaconStateValuesResponse
	25,  // 216: indexer.Indexer.CreateBeaconBlock:output_type -> indexer.CreateBeaconBlockResponse
	47,  // 217: indexer.Indexer.ListBeaconBlock:output_type -> indexer.ListBeaconBlockResponse
	49,  // 218: indexer.Indexer.CountBeaconBlock:output_type -> indexer.CountBeaconBlockResponse
	45,  // 219: indexer.Indexer.ListUniqueBeaconBlockValues:output_type -> indexer.ListUniqueBeaconBlockValuesResponse
	27,  // 220: indexer.Indexer.CreateBeaconBadBlock:output_type -> indexer.CreateBeaconBadBlockResponse
	53,  // 221: indexer.Indexer.ListBeaconBadBlock:output_type -> indexer.ListBeaconBadBlockResponse
	55,  // 222: indexer.Indexer.CountBeaconBadBlock:output_type -> indexer.CountBeaconBadBlockResponse
	51,  // 223: indexer.Indexer.ListUniqueBeaconBadBlockValues:output_type -> indexer.ListUniqueBeaconBadBlockValuesResponse
	29,  // 224: indexer.Indexer.CreateBeaconBadBlob:output_type -> indexer.CreateBeaconBadBlobResponse
	59,  // 225: indexer.Indexer.ListBeaconBadBlob:output_type -> indexer.ListBeaconBadBlobResponse
	61,  // 226: indexer.Indexer.CountBeaconBadBlob:output_type -> indexer.CountBeaconBadBlobResponse
	57,  // 227: indexer.Indexer.ListUniqueBeaconBadBlobValues:output_type -> indexer.ListUniqueBeaconBadBlobValuesResponse
	31,  // 228: indexer.Indexer.CreateExecutionBlockTrace:output_type -> indexer.CreateExecutionBlockTraceResponse
	33,  // 229: indexer.Indexer.ListExecutionBlockTrace:output_type -> indexer.ListExecutionBlockTraceResponse
	35,  // 230: indexer.Indexer.CountExecutionBlockTrace:output_type -> indexer.CountExecutionBlockTraceResponse
	37,  // 231: indexer.Indexer.ListUniqueExecutionBlockTraceValues:output_type -> indexer.ListUniqueExecutionBlockTraceValuesResponse
	64,  // 232: indexer.Indexer.CreateExecutionBadBlock:output_type -> indexer.CreateExecutionBadBlockResponse
	66,  // 233: indexer.Indexer.ListExecutionBadBlock:output_type -> indexer.ListExecutionBadBlockResponse
	68,  // 234: indexer.Indexer.CountExecutionBadBlock:output_type -> indexer.CountExecutionBadBlockResponse
	70,  // 235: indexer.Indexer.ListUniqueExecutionBadBlockValues:output_type -> indexer.ListUniqueExecutionBadBlockValuesResponse
	210, // [210:236] is the sub-list for method output_type
	184, // [184:210] is the sub-list for method input_type
	184, // [184:184] is the sub-list for extension type_name
	184, // [184:184] is the sub-list for extension extendee
	0,   // [0:184] is the sub-list for field type_name
}

func init() { file_indexer_indexer_proto_init() }
func file_indexer_indexer_proto_init() {
	if File_indexer_indexer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indexer_indexer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconBadBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconBadBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionBlockTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionBadBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthereumNetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitRepositoryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZcliConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStorageHandshakeTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStorageHandshakeTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeaconStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeaconStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeaconBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeaconBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeaconBadBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeaconBadBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeaconBadBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeaconBadBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExecutionBlockTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExecutionBlockTraceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExecutionBlockTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExecutionBlockTraceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountExecutionBlockTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountExecutionBlockTraceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueExecutionBlockTraceValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueExecutionBlockTraceValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueBeaconStateValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueBeaconStateValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeaconStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeaconStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBeaconStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBeaconStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueBeaconBlockValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueBeaconBlockValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeaconBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeaconBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBeaconBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBeaconBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueBeaconBadBlockValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueBeaconBadBlockValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeaconBadBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeaconBadBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBeaconBadBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBeaconBadBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueBeaconBadBlobValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueBeaconBadBlobValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeaconBadBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeaconBadBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBeaconBadBlobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBeaconBadBlobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationCursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExecutionBadBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExecutionBadBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExecutionBadBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExecutionBadBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountExecutionBadBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountExecutionBadBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueExecutionBadBlockValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueExecutionBadBlockValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indexer_indexer_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   65,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indexer_indexer_proto_goTypes,
		DependencyIndexes: file_indexer_indexer_proto_depIdxs,
		EnumInfos:         file_indexer_indexer_proto_enumTypes,
		MessageInfos:      file_indexer_indexer_proto_msgTypes,
	}.Build()
	File_indexer_indexer_proto = out.File
	file_indexer_indexer_proto_rawDesc = nil
	file_indexer_indexer_proto_goTypes = nil
	file_indexer_indexer_proto_depIdxs = nil
}
