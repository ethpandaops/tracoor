// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: indexer/indexer.proto

package indexer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListUniqueExecutionBlockTraceValuesRequest_Field int32

const (
	ListUniqueExecutionBlockTraceValuesRequest_NODE                     ListUniqueExecutionBlockTraceValuesRequest_Field = 0
	ListUniqueExecutionBlockTraceValuesRequest_BLOCK_HASH               ListUniqueExecutionBlockTraceValuesRequest_Field = 1
	ListUniqueExecutionBlockTraceValuesRequest_BLOCK_NUMBER             ListUniqueExecutionBlockTraceValuesRequest_Field = 2
	ListUniqueExecutionBlockTraceValuesRequest_LOCATION                 ListUniqueExecutionBlockTraceValuesRequest_Field = 3
	ListUniqueExecutionBlockTraceValuesRequest_NETWORK                  ListUniqueExecutionBlockTraceValuesRequest_Field = 4
	ListUniqueExecutionBlockTraceValuesRequest_EXECUTION_IMPLEMENTATION ListUniqueExecutionBlockTraceValuesRequest_Field = 5
	ListUniqueExecutionBlockTraceValuesRequest_NODE_VERSION             ListUniqueExecutionBlockTraceValuesRequest_Field = 6
	ListUniqueExecutionBlockTraceValuesRequest_CLIENT_VERSION           ListUniqueExecutionBlockTraceValuesRequest_Field = 7
)

// Enum value maps for ListUniqueExecutionBlockTraceValuesRequest_Field.
var (
	ListUniqueExecutionBlockTraceValuesRequest_Field_name = map[int32]string{
		0: "NODE",
		1: "BLOCK_HASH",
		2: "BLOCK_NUMBER",
		3: "LOCATION",
		4: "NETWORK",
		5: "EXECUTION_IMPLEMENTATION",
		6: "NODE_VERSION",
		7: "CLIENT_VERSION",
	}
	ListUniqueExecutionBlockTraceValuesRequest_Field_value = map[string]int32{
		"NODE":                     0,
		"BLOCK_HASH":               1,
		"BLOCK_NUMBER":             2,
		"LOCATION":                 3,
		"NETWORK":                  4,
		"EXECUTION_IMPLEMENTATION": 5,
		"NODE_VERSION":             6,
		"CLIENT_VERSION":           7,
	}
)

func (x ListUniqueExecutionBlockTraceValuesRequest_Field) Enum() *ListUniqueExecutionBlockTraceValuesRequest_Field {
	p := new(ListUniqueExecutionBlockTraceValuesRequest_Field)
	*p = x
	return p
}

func (x ListUniqueExecutionBlockTraceValuesRequest_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUniqueExecutionBlockTraceValuesRequest_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_indexer_proto_enumTypes[0].Descriptor()
}

func (ListUniqueExecutionBlockTraceValuesRequest_Field) Type() protoreflect.EnumType {
	return &file_indexer_indexer_proto_enumTypes[0]
}

func (x ListUniqueExecutionBlockTraceValuesRequest_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUniqueExecutionBlockTraceValuesRequest_Field.Descriptor instead.
func (ListUniqueExecutionBlockTraceValuesRequest_Field) EnumDescriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{13, 0}
}

type ListUniqueBeaconStateValuesRequest_Field int32

const (
	ListUniqueBeaconStateValuesRequest_NODE                  ListUniqueBeaconStateValuesRequest_Field = 0
	ListUniqueBeaconStateValuesRequest_SLOT                  ListUniqueBeaconStateValuesRequest_Field = 1
	ListUniqueBeaconStateValuesRequest_EPOCH                 ListUniqueBeaconStateValuesRequest_Field = 2
	ListUniqueBeaconStateValuesRequest_STATE_ROOT            ListUniqueBeaconStateValuesRequest_Field = 3
	ListUniqueBeaconStateValuesRequest_NODE_VERSION          ListUniqueBeaconStateValuesRequest_Field = 4
	ListUniqueBeaconStateValuesRequest_LOCATION              ListUniqueBeaconStateValuesRequest_Field = 5
	ListUniqueBeaconStateValuesRequest_NETWORK               ListUniqueBeaconStateValuesRequest_Field = 6
	ListUniqueBeaconStateValuesRequest_BEACON_IMPLEMENTATION ListUniqueBeaconStateValuesRequest_Field = 7
)

// Enum value maps for ListUniqueBeaconStateValuesRequest_Field.
var (
	ListUniqueBeaconStateValuesRequest_Field_name = map[int32]string{
		0: "NODE",
		1: "SLOT",
		2: "EPOCH",
		3: "STATE_ROOT",
		4: "NODE_VERSION",
		5: "LOCATION",
		6: "NETWORK",
		7: "BEACON_IMPLEMENTATION",
	}
	ListUniqueBeaconStateValuesRequest_Field_value = map[string]int32{
		"NODE":                  0,
		"SLOT":                  1,
		"EPOCH":                 2,
		"STATE_ROOT":            3,
		"NODE_VERSION":          4,
		"LOCATION":              5,
		"NETWORK":               6,
		"BEACON_IMPLEMENTATION": 7,
	}
)

func (x ListUniqueBeaconStateValuesRequest_Field) Enum() *ListUniqueBeaconStateValuesRequest_Field {
	p := new(ListUniqueBeaconStateValuesRequest_Field)
	*p = x
	return p
}

func (x ListUniqueBeaconStateValuesRequest_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUniqueBeaconStateValuesRequest_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_indexer_proto_enumTypes[1].Descriptor()
}

func (ListUniqueBeaconStateValuesRequest_Field) Type() protoreflect.EnumType {
	return &file_indexer_indexer_proto_enumTypes[1]
}

func (x ListUniqueBeaconStateValuesRequest_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUniqueBeaconStateValuesRequest_Field.Descriptor instead.
func (ListUniqueBeaconStateValuesRequest_Field) EnumDescriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{15, 0}
}

type ListUniqueExecutionBadBlockValuesRequest_Field int32

const (
	ListUniqueExecutionBadBlockValuesRequest_NODE                     ListUniqueExecutionBadBlockValuesRequest_Field = 0
	ListUniqueExecutionBadBlockValuesRequest_BLOCK_HASH               ListUniqueExecutionBadBlockValuesRequest_Field = 1
	ListUniqueExecutionBadBlockValuesRequest_BLOCK_NUMBER             ListUniqueExecutionBadBlockValuesRequest_Field = 2
	ListUniqueExecutionBadBlockValuesRequest_LOCATION                 ListUniqueExecutionBadBlockValuesRequest_Field = 3
	ListUniqueExecutionBadBlockValuesRequest_NETWORK                  ListUniqueExecutionBadBlockValuesRequest_Field = 4
	ListUniqueExecutionBadBlockValuesRequest_EXECUTION_IMPLEMENTATION ListUniqueExecutionBadBlockValuesRequest_Field = 5
	ListUniqueExecutionBadBlockValuesRequest_NODE_VERSION             ListUniqueExecutionBadBlockValuesRequest_Field = 6
	ListUniqueExecutionBadBlockValuesRequest_CLIENT_VERSION           ListUniqueExecutionBadBlockValuesRequest_Field = 7
	ListUniqueExecutionBadBlockValuesRequest_BLOCK_EXTRA_DATA         ListUniqueExecutionBadBlockValuesRequest_Field = 8
)

// Enum value maps for ListUniqueExecutionBadBlockValuesRequest_Field.
var (
	ListUniqueExecutionBadBlockValuesRequest_Field_name = map[int32]string{
		0: "NODE",
		1: "BLOCK_HASH",
		2: "BLOCK_NUMBER",
		3: "LOCATION",
		4: "NETWORK",
		5: "EXECUTION_IMPLEMENTATION",
		6: "NODE_VERSION",
		7: "CLIENT_VERSION",
		8: "BLOCK_EXTRA_DATA",
	}
	ListUniqueExecutionBadBlockValuesRequest_Field_value = map[string]int32{
		"NODE":                     0,
		"BLOCK_HASH":               1,
		"BLOCK_NUMBER":             2,
		"LOCATION":                 3,
		"NETWORK":                  4,
		"EXECUTION_IMPLEMENTATION": 5,
		"NODE_VERSION":             6,
		"CLIENT_VERSION":           7,
		"BLOCK_EXTRA_DATA":         8,
	}
)

func (x ListUniqueExecutionBadBlockValuesRequest_Field) Enum() *ListUniqueExecutionBadBlockValuesRequest_Field {
	p := new(ListUniqueExecutionBadBlockValuesRequest_Field)
	*p = x
	return p
}

func (x ListUniqueExecutionBadBlockValuesRequest_Field) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUniqueExecutionBadBlockValuesRequest_Field) Descriptor() protoreflect.EnumDescriptor {
	return file_indexer_indexer_proto_enumTypes[2].Descriptor()
}

func (ListUniqueExecutionBadBlockValuesRequest_Field) Type() protoreflect.EnumType {
	return &file_indexer_indexer_proto_enumTypes[2]
}

func (x ListUniqueExecutionBadBlockValuesRequest_Field) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUniqueExecutionBadBlockValuesRequest_Field.Descriptor instead.
func (ListUniqueExecutionBadBlockValuesRequest_Field) EnumDescriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{28, 0}
}

type BeaconState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt            *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	Slot                 *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StateRoot            *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	NodeVersion          *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Network              *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *BeaconState) Reset() {
	*x = BeaconState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconState) ProtoMessage() {}

func (x *BeaconState) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconState.ProtoReflect.Descriptor instead.
func (*BeaconState) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{0}
}

func (x *BeaconState) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BeaconState) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *BeaconState) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *BeaconState) GetSlot() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *BeaconState) GetEpoch() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *BeaconState) GetStateRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *BeaconState) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *BeaconState) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *BeaconState) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *BeaconState) GetBeaconImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type ExecutionBlockTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt               *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	BlockHash               *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network                 *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *ExecutionBlockTrace) Reset() {
	*x = ExecutionBlockTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionBlockTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionBlockTrace) ProtoMessage() {}

func (x *ExecutionBlockTrace) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionBlockTrace.ProtoReflect.Descriptor instead.
func (*ExecutionBlockTrace) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutionBlockTrace) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExecutionBlockTrace) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ExecutionBlockTrace) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *ExecutionBlockTrace) GetBlockHash() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionBlockTrace) GetBlockNumber() *wrapperspb.Int64Value {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *ExecutionBlockTrace) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ExecutionBlockTrace) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ExecutionBlockTrace) GetExecutionImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *ExecutionBlockTrace) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

type ExecutionBadBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Node                    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt               *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	BlockHash               *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network                 *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	BlockExtraData          *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=block_extra_data,json=blockExtraData,proto3" json:"block_extra_data,omitempty"`
}

func (x *ExecutionBadBlock) Reset() {
	*x = ExecutionBadBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionBadBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionBadBlock) ProtoMessage() {}

func (x *ExecutionBadBlock) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionBadBlock.ProtoReflect.Descriptor instead.
func (*ExecutionBadBlock) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{2}
}

func (x *ExecutionBadBlock) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExecutionBadBlock) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ExecutionBadBlock) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *ExecutionBadBlock) GetBlockHash() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionBadBlock) GetBlockNumber() *wrapperspb.Int64Value {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *ExecutionBadBlock) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ExecutionBadBlock) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ExecutionBadBlock) GetExecutionImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *ExecutionBadBlock) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ExecutionBadBlock) GetBlockExtraData() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockExtraData
	}
	return nil
}

type GetStorageHandshakeTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node  string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetStorageHandshakeTokenRequest) Reset() {
	*x = GetStorageHandshakeTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStorageHandshakeTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStorageHandshakeTokenRequest) ProtoMessage() {}

func (x *GetStorageHandshakeTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStorageHandshakeTokenRequest.ProtoReflect.Descriptor instead.
func (*GetStorageHandshakeTokenRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{3}
}

func (x *GetStorageHandshakeTokenRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *GetStorageHandshakeTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetStorageHandshakeTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetStorageHandshakeTokenResponse) Reset() {
	*x = GetStorageHandshakeTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStorageHandshakeTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStorageHandshakeTokenResponse) ProtoMessage() {}

func (x *GetStorageHandshakeTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStorageHandshakeTokenResponse.ProtoReflect.Descriptor instead.
func (*GetStorageHandshakeTokenResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{4}
}

func (x *GetStorageHandshakeTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateBeaconStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt            *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	Slot                 *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StateRoot            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	NodeVersion          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	Network              *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *CreateBeaconStateRequest) Reset() {
	*x = CreateBeaconStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeaconStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeaconStateRequest) ProtoMessage() {}

func (x *CreateBeaconStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeaconStateRequest.ProtoReflect.Descriptor instead.
func (*CreateBeaconStateRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{5}
}

func (x *CreateBeaconStateRequest) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetSlot() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetEpoch() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetStateRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateBeaconStateRequest) GetBeaconImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type CreateBeaconStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateBeaconStateResponse) Reset() {
	*x = CreateBeaconStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBeaconStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBeaconStateResponse) ProtoMessage() {}

func (x *CreateBeaconStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBeaconStateResponse.ProtoReflect.Descriptor instead.
func (*CreateBeaconStateResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{6}
}

func (x *CreateBeaconStateResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type CreateExecutionBlockTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt               *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	BlockHash               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Network                 *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *CreateExecutionBlockTraceRequest) Reset() {
	*x = CreateExecutionBlockTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExecutionBlockTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExecutionBlockTraceRequest) ProtoMessage() {}

func (x *CreateExecutionBlockTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExecutionBlockTraceRequest.ProtoReflect.Descriptor instead.
func (*CreateExecutionBlockTraceRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{7}
}

func (x *CreateExecutionBlockTraceRequest) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetBlockHash() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetBlockNumber() *wrapperspb.Int64Value {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetExecutionImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *CreateExecutionBlockTraceRequest) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

type CreateExecutionBlockTraceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateExecutionBlockTraceResponse) Reset() {
	*x = CreateExecutionBlockTraceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExecutionBlockTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExecutionBlockTraceResponse) ProtoMessage() {}

func (x *CreateExecutionBlockTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExecutionBlockTraceResponse.ProtoReflect.Descriptor instead.
func (*CreateExecutionBlockTraceResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{8}
}

func (x *CreateExecutionBlockTraceResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type ListExecutionBlockTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	BlockNumber             int64                  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash               string                 `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Location                string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Network                 string                 `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Before                  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=before,proto3" json:"before,omitempty"`
	After                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=after,proto3" json:"after,omitempty"`
	Pagination              *PaginationCursor      `protobuf:"bytes,8,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id                      string                 `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	ExecutionImplementation string                 `protobuf:"bytes,10,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             string                 `protobuf:"bytes,11,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *ListExecutionBlockTraceRequest) Reset() {
	*x = ListExecutionBlockTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExecutionBlockTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionBlockTraceRequest) ProtoMessage() {}

func (x *ListExecutionBlockTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionBlockTraceRequest.ProtoReflect.Descriptor instead.
func (*ListExecutionBlockTraceRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{9}
}

func (x *ListExecutionBlockTraceRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ListExecutionBlockTraceRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ListExecutionBlockTraceRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ListExecutionBlockTraceRequest) GetPagination() *PaginationCursor {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListExecutionBlockTraceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetExecutionImplementation() string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return ""
}

func (x *ListExecutionBlockTraceRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

type ListExecutionBlockTraceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionBlockTraces []*ExecutionBlockTrace `protobuf:"bytes,1,rep,name=execution_block_traces,json=executionBlockTraces,proto3" json:"execution_block_traces,omitempty"`
}

func (x *ListExecutionBlockTraceResponse) Reset() {
	*x = ListExecutionBlockTraceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExecutionBlockTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionBlockTraceResponse) ProtoMessage() {}

func (x *ListExecutionBlockTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionBlockTraceResponse.ProtoReflect.Descriptor instead.
func (*ListExecutionBlockTraceResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{10}
}

func (x *ListExecutionBlockTraceResponse) GetExecutionBlockTraces() []*ExecutionBlockTrace {
	if x != nil {
		return x.ExecutionBlockTraces
	}
	return nil
}

type CountExecutionBlockTraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	BlockNumber             int64                  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash               string                 `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Location                string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Network                 string                 `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Before                  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=before,proto3" json:"before,omitempty"`
	After                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=after,proto3" json:"after,omitempty"`
	ExecutionImplementation string                 `protobuf:"bytes,8,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             string                 `protobuf:"bytes,9,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
}

func (x *CountExecutionBlockTraceRequest) Reset() {
	*x = CountExecutionBlockTraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountExecutionBlockTraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountExecutionBlockTraceRequest) ProtoMessage() {}

func (x *CountExecutionBlockTraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountExecutionBlockTraceRequest.ProtoReflect.Descriptor instead.
func (*CountExecutionBlockTraceRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{11}
}

func (x *CountExecutionBlockTraceRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *CountExecutionBlockTraceRequest) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *CountExecutionBlockTraceRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *CountExecutionBlockTraceRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CountExecutionBlockTraceRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CountExecutionBlockTraceRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CountExecutionBlockTraceRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CountExecutionBlockTraceRequest) GetExecutionImplementation() string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return ""
}

func (x *CountExecutionBlockTraceRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

type CountExecutionBlockTraceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountExecutionBlockTraceResponse) Reset() {
	*x = CountExecutionBlockTraceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountExecutionBlockTraceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountExecutionBlockTraceResponse) ProtoMessage() {}

func (x *CountExecutionBlockTraceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountExecutionBlockTraceResponse.ProtoReflect.Descriptor instead.
func (*CountExecutionBlockTraceResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{12}
}

func (x *CountExecutionBlockTraceResponse) GetCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ListUniqueExecutionBlockTraceValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []ListUniqueExecutionBlockTraceValuesRequest_Field `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=indexer.ListUniqueExecutionBlockTraceValuesRequest_Field" json:"fields,omitempty"`
}

func (x *ListUniqueExecutionBlockTraceValuesRequest) Reset() {
	*x = ListUniqueExecutionBlockTraceValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueExecutionBlockTraceValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueExecutionBlockTraceValuesRequest) ProtoMessage() {}

func (x *ListUniqueExecutionBlockTraceValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueExecutionBlockTraceValuesRequest.ProtoReflect.Descriptor instead.
func (*ListUniqueExecutionBlockTraceValuesRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{13}
}

func (x *ListUniqueExecutionBlockTraceValuesRequest) GetFields() []ListUniqueExecutionBlockTraceValuesRequest_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListUniqueExecutionBlockTraceValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    []string `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	BlockHash               []string `protobuf:"bytes,2,rep,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             []int64  `protobuf:"varint,3,rep,packed,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                []string `protobuf:"bytes,4,rep,name=location,proto3" json:"location,omitempty"`
	Network                 []string `protobuf:"bytes,5,rep,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation []string `protobuf:"bytes,6,rep,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             []string `protobuf:"bytes,7,rep,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	ClientVersion           []string `protobuf:"bytes,8,rep,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) Reset() {
	*x = ListUniqueExecutionBlockTraceValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueExecutionBlockTraceValuesResponse) ProtoMessage() {}

func (x *ListUniqueExecutionBlockTraceValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueExecutionBlockTraceValuesResponse.ProtoReflect.Descriptor instead.
func (*ListUniqueExecutionBlockTraceValuesResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{14}
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetNode() []string {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetBlockHash() []string {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetBlockNumber() []int64 {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetNetwork() []string {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetExecutionImplementation() []string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetNodeVersion() []string {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ListUniqueExecutionBlockTraceValuesResponse) GetClientVersion() []string {
	if x != nil {
		return x.ClientVersion
	}
	return nil
}

type ListUniqueBeaconStateValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []ListUniqueBeaconStateValuesRequest_Field `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=indexer.ListUniqueBeaconStateValuesRequest_Field" json:"fields,omitempty"`
}

func (x *ListUniqueBeaconStateValuesRequest) Reset() {
	*x = ListUniqueBeaconStateValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueBeaconStateValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueBeaconStateValuesRequest) ProtoMessage() {}

func (x *ListUniqueBeaconStateValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueBeaconStateValuesRequest.ProtoReflect.Descriptor instead.
func (*ListUniqueBeaconStateValuesRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{15}
}

func (x *ListUniqueBeaconStateValuesRequest) GetFields() []ListUniqueBeaconStateValuesRequest_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListUniqueBeaconStateValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 []string `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	Slot                 []uint64 `protobuf:"varint,2,rep,packed,name=slot,proto3" json:"slot,omitempty"`
	Epoch                []uint64 `protobuf:"varint,3,rep,packed,name=epoch,proto3" json:"epoch,omitempty"`
	StateRoot            []string `protobuf:"bytes,4,rep,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	NodeVersion          []string `protobuf:"bytes,5,rep,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             []string `protobuf:"bytes,6,rep,name=location,proto3" json:"location,omitempty"`
	Network              []string `protobuf:"bytes,7,rep,name=network,proto3" json:"network,omitempty"`
	BeaconImplementation []string `protobuf:"bytes,8,rep,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *ListUniqueBeaconStateValuesResponse) Reset() {
	*x = ListUniqueBeaconStateValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueBeaconStateValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueBeaconStateValuesResponse) ProtoMessage() {}

func (x *ListUniqueBeaconStateValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueBeaconStateValuesResponse.ProtoReflect.Descriptor instead.
func (*ListUniqueBeaconStateValuesResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{16}
}

func (x *ListUniqueBeaconStateValuesResponse) GetNode() []string {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetSlot() []uint64 {
	if x != nil {
		return x.Slot
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetEpoch() []uint64 {
	if x != nil {
		return x.Epoch
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetStateRoot() []string {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetNodeVersion() []string {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetNetwork() []string {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ListUniqueBeaconStateValuesResponse) GetBeaconImplementation() []string {
	if x != nil {
		return x.BeaconImplementation
	}
	return nil
}

type ListBeaconStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Slot                 uint64                 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                uint64                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StateRoot            string                 `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	NodeVersion          string                 `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network              string                 `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Before               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
	After                *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	Pagination           *PaginationCursor      `protobuf:"bytes,10,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id                   string                 `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	BeaconImplementation string                 `protobuf:"bytes,12,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
}

func (x *ListBeaconStateRequest) Reset() {
	*x = ListBeaconStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeaconStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeaconStateRequest) ProtoMessage() {}

func (x *ListBeaconStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeaconStateRequest.ProtoReflect.Descriptor instead.
func (*ListBeaconStateRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{17}
}

func (x *ListBeaconStateRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ListBeaconStateRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *ListBeaconStateRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ListBeaconStateRequest) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *ListBeaconStateRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *ListBeaconStateRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListBeaconStateRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ListBeaconStateRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ListBeaconStateRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ListBeaconStateRequest) GetPagination() *PaginationCursor {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListBeaconStateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListBeaconStateRequest) GetBeaconImplementation() string {
	if x != nil {
		return x.BeaconImplementation
	}
	return ""
}

type ListBeaconStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconStates []*BeaconState `protobuf:"bytes,1,rep,name=beacon_states,json=beaconStates,proto3" json:"beacon_states,omitempty"`
}

func (x *ListBeaconStateResponse) Reset() {
	*x = ListBeaconStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBeaconStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBeaconStateResponse) ProtoMessage() {}

func (x *ListBeaconStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBeaconStateResponse.ProtoReflect.Descriptor instead.
func (*ListBeaconStateResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{18}
}

func (x *ListBeaconStateResponse) GetBeaconStates() []*BeaconState {
	if x != nil {
		return x.BeaconStates
	}
	return nil
}

type CountBeaconStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                 string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Slot                 uint64                 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Epoch                uint64                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StateRoot            string                 `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	NodeVersion          string                 `protobuf:"bytes,5,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	Location             string                 `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Network              string                 `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Before               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=before,proto3" json:"before,omitempty"`
	After                *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=after,proto3" json:"after,omitempty"`
	BeaconImplementation string                 `protobuf:"bytes,10,opt,name=beacon_implementation,json=beaconImplementation,proto3" json:"beacon_implementation,omitempty"`
	Id                   string                 `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CountBeaconStateRequest) Reset() {
	*x = CountBeaconStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBeaconStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBeaconStateRequest) ProtoMessage() {}

func (x *CountBeaconStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBeaconStateRequest.ProtoReflect.Descriptor instead.
func (*CountBeaconStateRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{19}
}

func (x *CountBeaconStateRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *CountBeaconStateRequest) GetSlot() uint64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *CountBeaconStateRequest) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *CountBeaconStateRequest) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *CountBeaconStateRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *CountBeaconStateRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CountBeaconStateRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CountBeaconStateRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CountBeaconStateRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CountBeaconStateRequest) GetBeaconImplementation() string {
	if x != nil {
		return x.BeaconImplementation
	}
	return ""
}

func (x *CountBeaconStateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CountBeaconStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountBeaconStateResponse) Reset() {
	*x = CountBeaconStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBeaconStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBeaconStateResponse) ProtoMessage() {}

func (x *CountBeaconStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBeaconStateResponse.ProtoReflect.Descriptor instead.
func (*CountBeaconStateResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{20}
}

func (x *CountBeaconStateResponse) GetCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type PaginationCursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	OrderBy string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *PaginationCursor) Reset() {
	*x = PaginationCursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationCursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationCursor) ProtoMessage() {}

func (x *PaginationCursor) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationCursor.ProtoReflect.Descriptor instead.
func (*PaginationCursor) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{21}
}

func (x *PaginationCursor) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationCursor) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginationCursor) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type CreateExecutionBadBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	FetchedAt               *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	BlockHash               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Network                 *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	BlockExtraData          *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=block_extra_data,json=blockExtraData,proto3" json:"block_extra_data,omitempty"`
}

func (x *CreateExecutionBadBlockRequest) Reset() {
	*x = CreateExecutionBadBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExecutionBadBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExecutionBadBlockRequest) ProtoMessage() {}

func (x *CreateExecutionBadBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExecutionBadBlockRequest.ProtoReflect.Descriptor instead.
func (*CreateExecutionBadBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{22}
}

func (x *CreateExecutionBadBlockRequest) GetNode() *wrapperspb.StringValue {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetBlockHash() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetBlockNumber() *wrapperspb.Int64Value {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetLocation() *wrapperspb.StringValue {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetNetwork() *wrapperspb.StringValue {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetExecutionImplementation() *wrapperspb.StringValue {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetNodeVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *CreateExecutionBadBlockRequest) GetBlockExtraData() *wrapperspb.StringValue {
	if x != nil {
		return x.BlockExtraData
	}
	return nil
}

type CreateExecutionBadBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateExecutionBadBlockResponse) Reset() {
	*x = CreateExecutionBadBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExecutionBadBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExecutionBadBlockResponse) ProtoMessage() {}

func (x *CreateExecutionBadBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExecutionBadBlockResponse.ProtoReflect.Descriptor instead.
func (*CreateExecutionBadBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{23}
}

func (x *CreateExecutionBadBlockResponse) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type ListExecutionBadBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	BlockNumber             int64                  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash               string                 `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Location                string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Network                 string                 `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Before                  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=before,proto3" json:"before,omitempty"`
	After                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=after,proto3" json:"after,omitempty"`
	Pagination              *PaginationCursor      `protobuf:"bytes,8,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id                      string                 `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
	ExecutionImplementation string                 `protobuf:"bytes,10,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             string                 `protobuf:"bytes,11,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	BlockExtraData          string                 `protobuf:"bytes,12,opt,name=block_extra_data,json=blockExtraData,proto3" json:"block_extra_data,omitempty"`
}

func (x *ListExecutionBadBlockRequest) Reset() {
	*x = ListExecutionBadBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExecutionBadBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionBadBlockRequest) ProtoMessage() {}

func (x *ListExecutionBadBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionBadBlockRequest.ProtoReflect.Descriptor instead.
func (*ListExecutionBadBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{24}
}

func (x *ListExecutionBadBlockRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ListExecutionBadBlockRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ListExecutionBadBlockRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ListExecutionBadBlockRequest) GetPagination() *PaginationCursor {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListExecutionBadBlockRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetExecutionImplementation() string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *ListExecutionBadBlockRequest) GetBlockExtraData() string {
	if x != nil {
		return x.BlockExtraData
	}
	return ""
}

type ListExecutionBadBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionBadBlocks []*ExecutionBadBlock `protobuf:"bytes,1,rep,name=execution_bad_blocks,json=executionBadBlocks,proto3" json:"execution_bad_blocks,omitempty"`
}

func (x *ListExecutionBadBlockResponse) Reset() {
	*x = ListExecutionBadBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExecutionBadBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExecutionBadBlockResponse) ProtoMessage() {}

func (x *ListExecutionBadBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExecutionBadBlockResponse.ProtoReflect.Descriptor instead.
func (*ListExecutionBadBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{25}
}

func (x *ListExecutionBadBlockResponse) GetExecutionBadBlocks() []*ExecutionBadBlock {
	if x != nil {
		return x.ExecutionBadBlocks
	}
	return nil
}

type CountExecutionBadBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    string                 `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	BlockNumber             int64                  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash               string                 `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Location                string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Network                 string                 `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Before                  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=before,proto3" json:"before,omitempty"`
	After                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=after,proto3" json:"after,omitempty"`
	ExecutionImplementation string                 `protobuf:"bytes,8,opt,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             string                 `protobuf:"bytes,9,opt,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	BlockExtraData          string                 `protobuf:"bytes,10,opt,name=block_extra_data,json=blockExtraData,proto3" json:"block_extra_data,omitempty"`
}

func (x *CountExecutionBadBlockRequest) Reset() {
	*x = CountExecutionBadBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountExecutionBadBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountExecutionBadBlockRequest) ProtoMessage() {}

func (x *CountExecutionBadBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountExecutionBadBlockRequest.ProtoReflect.Descriptor instead.
func (*CountExecutionBadBlockRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{26}
}

func (x *CountExecutionBadBlockRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *CountExecutionBadBlockRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CountExecutionBadBlockRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CountExecutionBadBlockRequest) GetExecutionImplementation() string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetNodeVersion() string {
	if x != nil {
		return x.NodeVersion
	}
	return ""
}

func (x *CountExecutionBadBlockRequest) GetBlockExtraData() string {
	if x != nil {
		return x.BlockExtraData
	}
	return ""
}

type CountExecutionBadBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountExecutionBadBlockResponse) Reset() {
	*x = CountExecutionBadBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountExecutionBadBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountExecutionBadBlockResponse) ProtoMessage() {}

func (x *CountExecutionBadBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountExecutionBadBlockResponse.ProtoReflect.Descriptor instead.
func (*CountExecutionBadBlockResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{27}
}

func (x *CountExecutionBadBlockResponse) GetCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Count
	}
	return nil
}

type ListUniqueExecutionBadBlockValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []ListUniqueExecutionBadBlockValuesRequest_Field `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=indexer.ListUniqueExecutionBadBlockValuesRequest_Field" json:"fields,omitempty"`
}

func (x *ListUniqueExecutionBadBlockValuesRequest) Reset() {
	*x = ListUniqueExecutionBadBlockValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueExecutionBadBlockValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueExecutionBadBlockValuesRequest) ProtoMessage() {}

func (x *ListUniqueExecutionBadBlockValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueExecutionBadBlockValuesRequest.ProtoReflect.Descriptor instead.
func (*ListUniqueExecutionBadBlockValuesRequest) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{28}
}

func (x *ListUniqueExecutionBadBlockValuesRequest) GetFields() []ListUniqueExecutionBadBlockValuesRequest_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListUniqueExecutionBadBlockValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node                    []string `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
	BlockHash               []string `protobuf:"bytes,2,rep,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber             []int64  `protobuf:"varint,3,rep,packed,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Location                []string `protobuf:"bytes,4,rep,name=location,proto3" json:"location,omitempty"`
	Network                 []string `protobuf:"bytes,5,rep,name=network,proto3" json:"network,omitempty"`
	ExecutionImplementation []string `protobuf:"bytes,6,rep,name=execution_implementation,json=executionImplementation,proto3" json:"execution_implementation,omitempty"`
	NodeVersion             []string `protobuf:"bytes,7,rep,name=node_version,json=nodeVersion,proto3" json:"node_version,omitempty"`
	ClientVersion           []string `protobuf:"bytes,8,rep,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	BlockExtraData          []string `protobuf:"bytes,9,rep,name=block_extra_data,json=blockExtraData,proto3" json:"block_extra_data,omitempty"`
}

func (x *ListUniqueExecutionBadBlockValuesResponse) Reset() {
	*x = ListUniqueExecutionBadBlockValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_indexer_indexer_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniqueExecutionBadBlockValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniqueExecutionBadBlockValuesResponse) ProtoMessage() {}

func (x *ListUniqueExecutionBadBlockValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_indexer_indexer_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniqueExecutionBadBlockValuesResponse.ProtoReflect.Descriptor instead.
func (*ListUniqueExecutionBadBlockValuesResponse) Descriptor() ([]byte, []int) {
	return file_indexer_indexer_proto_rawDescGZIP(), []int{29}
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetNode() []string {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetBlockHash() []string {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetBlockNumber() []int64 {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetLocation() []string {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetNetwork() []string {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetExecutionImplementation() []string {
	if x != nil {
		return x.ExecutionImplementation
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetNodeVersion() []string {
	if x != nil {
		return x.NodeVersion
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetClientVersion() []string {
	if x != nil {
		return x.ClientVersion
	}
	return nil
}

func (x *ListUniqueExecutionBadBlockValuesResponse) GetBlockExtraData() []string {
	if x != nil {
		return x.BlockExtraData
	}
	return nil
}

var File_indexer_indexer_proto protoreflect.FileDescriptor

var file_indexer_indexer_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd1, 0x04, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x04, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x57, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xff, 0x04, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x3e, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x57, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x38, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb0, 0x04, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x15, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0x98, 0x04, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x57, 0x0a, 0x18, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbb, 0x03, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x1f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x56, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x2a, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x05, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x22, 0xbe,
	0x02, 0x0a, 0x2b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x18, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xef, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x7e, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e,
	0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x07, 0x22, 0x90, 0x02, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x33, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x03, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x22, 0xfa, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e,
	0x0a, 0x18, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5b,
	0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xde, 0x04, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x57, 0x0a, 0x18, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe3, 0x03,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f,
	0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x12,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x22, 0x99, 0x03, 0x0a, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0x54,
	0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x08, 0x22, 0xe6, 0x02,
	0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x32, 0xcd, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x12, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x74, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x29, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x18, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x23,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x31, 0x2e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6f, 0x72, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_indexer_indexer_proto_rawDescOnce sync.Once
	file_indexer_indexer_proto_rawDescData = file_indexer_indexer_proto_rawDesc
)

func file_indexer_indexer_proto_rawDescGZIP() []byte {
	file_indexer_indexer_proto_rawDescOnce.Do(func() {
		file_indexer_indexer_proto_rawDescData = protoimpl.X.CompressGZIP(file_indexer_indexer_proto_rawDescData)
	})
	return file_indexer_indexer_proto_rawDescData
}

var file_indexer_indexer_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_indexer_indexer_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_indexer_indexer_proto_goTypes = []interface{}{
	(ListUniqueExecutionBlockTraceValuesRequest_Field)(0), // 0: indexer.ListUniqueExecutionBlockTraceValuesRequest.Field
	(ListUniqueBeaconStateValuesRequest_Field)(0),         // 1: indexer.ListUniqueBeaconStateValuesRequest.Field
	(ListUniqueExecutionBadBlockValuesRequest_Field)(0),   // 2: indexer.ListUniqueExecutionBadBlockValuesRequest.Field
	(*BeaconState)(nil),                                 // 3: indexer.BeaconState
	(*ExecutionBlockTrace)(nil),                         // 4: indexer.ExecutionBlockTrace
	(*ExecutionBadBlock)(nil),                           // 5: indexer.ExecutionBadBlock
	(*GetStorageHandshakeTokenRequest)(nil),             // 6: indexer.GetStorageHandshakeTokenRequest
	(*GetStorageHandshakeTokenResponse)(nil),            // 7: indexer.GetStorageHandshakeTokenResponse
	(*CreateBeaconStateRequest)(nil),                    // 8: indexer.CreateBeaconStateRequest
	(*CreateBeaconStateResponse)(nil),                   // 9: indexer.CreateBeaconStateResponse
	(*CreateExecutionBlockTraceRequest)(nil),            // 10: indexer.CreateExecutionBlockTraceRequest
	(*CreateExecutionBlockTraceResponse)(nil),           // 11: indexer.CreateExecutionBlockTraceResponse
	(*ListExecutionBlockTraceRequest)(nil),              // 12: indexer.ListExecutionBlockTraceRequest
	(*ListExecutionBlockTraceResponse)(nil),             // 13: indexer.ListExecutionBlockTraceResponse
	(*CountExecutionBlockTraceRequest)(nil),             // 14: indexer.CountExecutionBlockTraceRequest
	(*CountExecutionBlockTraceResponse)(nil),            // 15: indexer.CountExecutionBlockTraceResponse
	(*ListUniqueExecutionBlockTraceValuesRequest)(nil),  // 16: indexer.ListUniqueExecutionBlockTraceValuesRequest
	(*ListUniqueExecutionBlockTraceValuesResponse)(nil), // 17: indexer.ListUniqueExecutionBlockTraceValuesResponse
	(*ListUniqueBeaconStateValuesRequest)(nil),          // 18: indexer.ListUniqueBeaconStateValuesRequest
	(*ListUniqueBeaconStateValuesResponse)(nil),         // 19: indexer.ListUniqueBeaconStateValuesResponse
	(*ListBeaconStateRequest)(nil),                      // 20: indexer.ListBeaconStateRequest
	(*ListBeaconStateResponse)(nil),                     // 21: indexer.ListBeaconStateResponse
	(*CountBeaconStateRequest)(nil),                     // 22: indexer.CountBeaconStateRequest
	(*CountBeaconStateResponse)(nil),                    // 23: indexer.CountBeaconStateResponse
	(*PaginationCursor)(nil),                            // 24: indexer.PaginationCursor
	(*CreateExecutionBadBlockRequest)(nil),              // 25: indexer.CreateExecutionBadBlockRequest
	(*CreateExecutionBadBlockResponse)(nil),             // 26: indexer.CreateExecutionBadBlockResponse
	(*ListExecutionBadBlockRequest)(nil),                // 27: indexer.ListExecutionBadBlockRequest
	(*ListExecutionBadBlockResponse)(nil),               // 28: indexer.ListExecutionBadBlockResponse
	(*CountExecutionBadBlockRequest)(nil),               // 29: indexer.CountExecutionBadBlockRequest
	(*CountExecutionBadBlockResponse)(nil),              // 30: indexer.CountExecutionBadBlockResponse
	(*ListUniqueExecutionBadBlockValuesRequest)(nil),    // 31: indexer.ListUniqueExecutionBadBlockValuesRequest
	(*ListUniqueExecutionBadBlockValuesResponse)(nil),   // 32: indexer.ListUniqueExecutionBadBlockValuesResponse
	(*wrapperspb.StringValue)(nil),                      // 33: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),                       // 34: google.protobuf.Timestamp
	(*wrapperspb.UInt64Value)(nil),                      // 35: google.protobuf.UInt64Value
	(*wrapperspb.Int64Value)(nil),                       // 36: google.protobuf.Int64Value
}
var file_indexer_indexer_proto_depIdxs = []int32{
	33, // 0: indexer.BeaconState.id:type_name -> google.protobuf.StringValue
	33, // 1: indexer.BeaconState.node:type_name -> google.protobuf.StringValue
	34, // 2: indexer.BeaconState.fetched_at:type_name -> google.protobuf.Timestamp
	35, // 3: indexer.BeaconState.slot:type_name -> google.protobuf.UInt64Value
	35, // 4: indexer.BeaconState.epoch:type_name -> google.protobuf.UInt64Value
	33, // 5: indexer.BeaconState.state_root:type_name -> google.protobuf.StringValue
	33, // 6: indexer.BeaconState.node_version:type_name -> google.protobuf.StringValue
	33, // 7: indexer.BeaconState.location:type_name -> google.protobuf.StringValue
	33, // 8: indexer.BeaconState.network:type_name -> google.protobuf.StringValue
	33, // 9: indexer.BeaconState.beacon_implementation:type_name -> google.protobuf.StringValue
	33, // 10: indexer.ExecutionBlockTrace.id:type_name -> google.protobuf.StringValue
	33, // 11: indexer.ExecutionBlockTrace.node:type_name -> google.protobuf.StringValue
	34, // 12: indexer.ExecutionBlockTrace.fetched_at:type_name -> google.protobuf.Timestamp
	33, // 13: indexer.ExecutionBlockTrace.block_hash:type_name -> google.protobuf.StringValue
	36, // 14: indexer.ExecutionBlockTrace.block_number:type_name -> google.protobuf.Int64Value
	33, // 15: indexer.ExecutionBlockTrace.location:type_name -> google.protobuf.StringValue
	33, // 16: indexer.ExecutionBlockTrace.network:type_name -> google.protobuf.StringValue
	33, // 17: indexer.ExecutionBlockTrace.execution_implementation:type_name -> google.protobuf.StringValue
	33, // 18: indexer.ExecutionBlockTrace.node_version:type_name -> google.protobuf.StringValue
	33, // 19: indexer.ExecutionBadBlock.id:type_name -> google.protobuf.StringValue
	33, // 20: indexer.ExecutionBadBlock.node:type_name -> google.protobuf.StringValue
	34, // 21: indexer.ExecutionBadBlock.fetched_at:type_name -> google.protobuf.Timestamp
	33, // 22: indexer.ExecutionBadBlock.block_hash:type_name -> google.protobuf.StringValue
	36, // 23: indexer.ExecutionBadBlock.block_number:type_name -> google.protobuf.Int64Value
	33, // 24: indexer.ExecutionBadBlock.location:type_name -> google.protobuf.StringValue
	33, // 25: indexer.ExecutionBadBlock.network:type_name -> google.protobuf.StringValue
	33, // 26: indexer.ExecutionBadBlock.execution_implementation:type_name -> google.protobuf.StringValue
	33, // 27: indexer.ExecutionBadBlock.node_version:type_name -> google.protobuf.StringValue
	33, // 28: indexer.ExecutionBadBlock.block_extra_data:type_name -> google.protobuf.StringValue
	33, // 29: indexer.CreateBeaconStateRequest.node:type_name -> google.protobuf.StringValue
	34, // 30: indexer.CreateBeaconStateRequest.fetched_at:type_name -> google.protobuf.Timestamp
	35, // 31: indexer.CreateBeaconStateRequest.slot:type_name -> google.protobuf.UInt64Value
	35, // 32: indexer.CreateBeaconStateRequest.epoch:type_name -> google.protobuf.UInt64Value
	33, // 33: indexer.CreateBeaconStateRequest.state_root:type_name -> google.protobuf.StringValue
	33, // 34: indexer.CreateBeaconStateRequest.node_version:type_name -> google.protobuf.StringValue
	33, // 35: indexer.CreateBeaconStateRequest.location:type_name -> google.protobuf.StringValue
	33, // 36: indexer.CreateBeaconStateRequest.network:type_name -> google.protobuf.StringValue
	33, // 37: indexer.CreateBeaconStateRequest.beacon_implementation:type_name -> google.protobuf.StringValue
	33, // 38: indexer.CreateBeaconStateResponse.id:type_name -> google.protobuf.StringValue
	33, // 39: indexer.CreateExecutionBlockTraceRequest.node:type_name -> google.protobuf.StringValue
	34, // 40: indexer.CreateExecutionBlockTraceRequest.fetched_at:type_name -> google.protobuf.Timestamp
	33, // 41: indexer.CreateExecutionBlockTraceRequest.block_hash:type_name -> google.protobuf.StringValue
	36, // 42: indexer.CreateExecutionBlockTraceRequest.block_number:type_name -> google.protobuf.Int64Value
	33, // 43: indexer.CreateExecutionBlockTraceRequest.location:type_name -> google.protobuf.StringValue
	33, // 44: indexer.CreateExecutionBlockTraceRequest.network:type_name -> google.protobuf.StringValue
	33, // 45: indexer.CreateExecutionBlockTraceRequest.execution_implementation:type_name -> google.protobuf.StringValue
	33, // 46: indexer.CreateExecutionBlockTraceRequest.node_version:type_name -> google.protobuf.StringValue
	33, // 47: indexer.CreateExecutionBlockTraceResponse.id:type_name -> google.protobuf.StringValue
	34, // 48: indexer.ListExecutionBlockTraceRequest.before:type_name -> google.protobuf.Timestamp
	34, // 49: indexer.ListExecutionBlockTraceRequest.after:type_name -> google.protobuf.Timestamp
	24, // 50: indexer.ListExecutionBlockTraceRequest.pagination:type_name -> indexer.PaginationCursor
	4,  // 51: indexer.ListExecutionBlockTraceResponse.execution_block_traces:type_name -> indexer.ExecutionBlockTrace
	34, // 52: indexer.CountExecutionBlockTraceRequest.before:type_name -> google.protobuf.Timestamp
	34, // 53: indexer.CountExecutionBlockTraceRequest.after:type_name -> google.protobuf.Timestamp
	35, // 54: indexer.CountExecutionBlockTraceResponse.count:type_name -> google.protobuf.UInt64Value
	0,  // 55: indexer.ListUniqueExecutionBlockTraceValuesRequest.fields:type_name -> indexer.ListUniqueExecutionBlockTraceValuesRequest.Field
	1,  // 56: indexer.ListUniqueBeaconStateValuesRequest.fields:type_name -> indexer.ListUniqueBeaconStateValuesRequest.Field
	34, // 57: indexer.ListBeaconStateRequest.before:type_name -> google.protobuf.Timestamp
	34, // 58: indexer.ListBeaconStateRequest.after:type_name -> google.protobuf.Timestamp
	24, // 59: indexer.ListBeaconStateRequest.pagination:type_name -> indexer.PaginationCursor
	3,  // 60: indexer.ListBeaconStateResponse.beacon_states:type_name -> indexer.BeaconState
	34, // 61: indexer.CountBeaconStateRequest.before:type_name -> google.protobuf.Timestamp
	34, // 62: indexer.CountBeaconStateRequest.after:type_name -> google.protobuf.Timestamp
	35, // 63: indexer.CountBeaconStateResponse.count:type_name -> google.protobuf.UInt64Value
	33, // 64: indexer.CreateExecutionBadBlockRequest.node:type_name -> google.protobuf.StringValue
	34, // 65: indexer.CreateExecutionBadBlockRequest.fetched_at:type_name -> google.protobuf.Timestamp
	33, // 66: indexer.CreateExecutionBadBlockRequest.block_hash:type_name -> google.protobuf.StringValue
	36, // 67: indexer.CreateExecutionBadBlockRequest.block_number:type_name -> google.protobuf.Int64Value
	33, // 68: indexer.CreateExecutionBadBlockRequest.location:type_name -> google.protobuf.StringValue
	33, // 69: indexer.CreateExecutionBadBlockRequest.network:type_name -> google.protobuf.StringValue
	33, // 70: indexer.CreateExecutionBadBlockRequest.execution_implementation:type_name -> google.protobuf.StringValue
	33, // 71: indexer.CreateExecutionBadBlockRequest.node_version:type_name -> google.protobuf.StringValue
	33, // 72: indexer.CreateExecutionBadBlockRequest.block_extra_data:type_name -> google.protobuf.StringValue
	33, // 73: indexer.CreateExecutionBadBlockResponse.id:type_name -> google.protobuf.StringValue
	34, // 74: indexer.ListExecutionBadBlockRequest.before:type_name -> google.protobuf.Timestamp
	34, // 75: indexer.ListExecutionBadBlockRequest.after:type_name -> google.protobuf.Timestamp
	24, // 76: indexer.ListExecutionBadBlockRequest.pagination:type_name -> indexer.PaginationCursor
	5,  // 77: indexer.ListExecutionBadBlockResponse.execution_bad_blocks:type_name -> indexer.ExecutionBadBlock
	34, // 78: indexer.CountExecutionBadBlockRequest.before:type_name -> google.protobuf.Timestamp
	34, // 79: indexer.CountExecutionBadBlockRequest.after:type_name -> google.protobuf.Timestamp
	35, // 80: indexer.CountExecutionBadBlockResponse.count:type_name -> google.protobuf.UInt64Value
	2,  // 81: indexer.ListUniqueExecutionBadBlockValuesRequest.fields:type_name -> indexer.ListUniqueExecutionBadBlockValuesRequest.Field
	6,  // 82: indexer.Indexer.GetStorageHandshakeToken:input_type -> indexer.GetStorageHandshakeTokenRequest
	8,  // 83: indexer.Indexer.CreateBeaconState:input_type -> indexer.CreateBeaconStateRequest
	20, // 84: indexer.Indexer.ListBeaconState:input_type -> indexer.ListBeaconStateRequest
	22, // 85: indexer.Indexer.CountBeaconState:input_type -> indexer.CountBeaconStateRequest
	18, // 86: indexer.Indexer.ListUniqueBeaconStateValues:input_type -> indexer.ListUniqueBeaconStateValuesRequest
	10, // 87: indexer.Indexer.CreateExecutionBlockTrace:input_type -> indexer.CreateExecutionBlockTraceRequest
	12, // 88: indexer.Indexer.ListExecutionBlockTrace:input_type -> indexer.ListExecutionBlockTraceRequest
	14, // 89: indexer.Indexer.CountExecutionBlockTrace:input_type -> indexer.CountExecutionBlockTraceRequest
	16, // 90: indexer.Indexer.ListUniqueExecutionBlockTraceValues:input_type -> indexer.ListUniqueExecutionBlockTraceValuesRequest
	25, // 91: indexer.Indexer.CreateExecutionBadBlock:input_type -> indexer.CreateExecutionBadBlockRequest
	27, // 92: indexer.Indexer.ListExecutionBadBlock:input_type -> indexer.ListExecutionBadBlockRequest
	29, // 93: indexer.Indexer.CountExecutionBadBlock:input_type -> indexer.CountExecutionBadBlockRequest
	31, // 94: indexer.Indexer.ListUniqueExecutionBadBlockValues:input_type -> indexer.ListUniqueExecutionBadBlockValuesRequest
	7,  // 95: indexer.Indexer.GetStorageHandshakeToken:output_type -> indexer.GetStorageHandshakeTokenResponse
	9,  // 96: indexer.Indexer.CreateBeaconState:output_type -> indexer.CreateBeaconStateResponse
	21, // 97: indexer.Indexer.ListBeaconState:output_type -> indexer.ListBeaconStateResponse
	23, // 98: indexer.Indexer.CountBeaconState:output_type -> indexer.CountBeaconStateResponse
	19, // 99: indexer.Indexer.ListUniqueBeaconStateValues:output_type -> indexer.ListUniqueBeaconStateValuesResponse
	11, // 100: indexer.Indexer.CreateExecutionBlockTrace:output_type -> indexer.CreateExecutionBlockTraceResponse
	13, // 101: indexer.Indexer.ListExecutionBlockTrace:output_type -> indexer.ListExecutionBlockTraceResponse
	15, // 102: indexer.Indexer.CountExecutionBlockTrace:output_type -> indexer.CountExecutionBlockTraceResponse
	17, // 103: indexer.Indexer.ListUniqueExecutionBlockTraceValues:output_type -> indexer.ListUniqueExecutionBlockTraceValuesResponse
	26, // 104: indexer.Indexer.CreateExecutionBadBlock:output_type -> indexer.CreateExecutionBadBlockResponse
	28, // 105: indexer.Indexer.ListExecutionBadBlock:output_type -> indexer.ListExecutionBadBlockResponse
	30, // 106: indexer.Indexer.CountExecutionBadBlock:output_type -> indexer.CountExecutionBadBlockResponse
	32, // 107: indexer.Indexer.ListUniqueExecutionBadBlockValues:output_type -> indexer.ListUniqueExecutionBadBlockValuesResponse
	95, // [95:108] is the sub-list for method output_type
	82, // [82:95] is the sub-list for method input_type
	82, // [82:82] is the sub-list for extension type_name
	82, // [82:82] is the sub-list for extension extendee
	0,  // [0:82] is the sub-list for field type_name
}

func init() { file_indexer_indexer_proto_init() }
func file_indexer_indexer_proto_init() {
	if File_indexer_indexer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_indexer_indexer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionBlockTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionBadBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStorageHandshakeTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStorageHandshakeTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeaconStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBeaconStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExecutionBlockTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExecutionBlockTraceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExecutionBlockTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExecutionBlockTraceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountExecutionBlockTraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountExecutionBlockTraceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueExecutionBlockTraceValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueExecutionBlockTraceValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueBeaconStateValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueBeaconStateValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeaconStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBeaconStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBeaconStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBeaconStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationCursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExecutionBadBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExecutionBadBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExecutionBadBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExecutionBadBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountExecutionBadBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountExecutionBadBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueExecutionBadBlockValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_indexer_indexer_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniqueExecutionBadBlockValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_indexer_indexer_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_indexer_indexer_proto_goTypes,
		DependencyIndexes: file_indexer_indexer_proto_depIdxs,
		EnumInfos:         file_indexer_indexer_proto_enumTypes,
		MessageInfos:      file_indexer_indexer_proto_msgTypes,
	}.Build()
	File_indexer_indexer_proto = out.File
	file_indexer_indexer_proto_rawDesc = nil
	file_indexer_indexer_proto_goTypes = nil
	file_indexer_indexer_proto_depIdxs = nil
}
