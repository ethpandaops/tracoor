// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: indexer/indexer.proto

package indexer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Indexer_GetConfig_FullMethodName                           = "/indexer.Indexer/GetConfig"
	Indexer_GetStorageHandshakeToken_FullMethodName            = "/indexer.Indexer/GetStorageHandshakeToken"
	Indexer_CreateBeaconState_FullMethodName                   = "/indexer.Indexer/CreateBeaconState"
	Indexer_ListBeaconState_FullMethodName                     = "/indexer.Indexer/ListBeaconState"
	Indexer_CountBeaconState_FullMethodName                    = "/indexer.Indexer/CountBeaconState"
	Indexer_ListUniqueBeaconStateValues_FullMethodName         = "/indexer.Indexer/ListUniqueBeaconStateValues"
	Indexer_CreateBeaconBlock_FullMethodName                   = "/indexer.Indexer/CreateBeaconBlock"
	Indexer_ListBeaconBlock_FullMethodName                     = "/indexer.Indexer/ListBeaconBlock"
	Indexer_CountBeaconBlock_FullMethodName                    = "/indexer.Indexer/CountBeaconBlock"
	Indexer_ListUniqueBeaconBlockValues_FullMethodName         = "/indexer.Indexer/ListUniqueBeaconBlockValues"
	Indexer_CreateBeaconBadBlock_FullMethodName                = "/indexer.Indexer/CreateBeaconBadBlock"
	Indexer_ListBeaconBadBlock_FullMethodName                  = "/indexer.Indexer/ListBeaconBadBlock"
	Indexer_CountBeaconBadBlock_FullMethodName                 = "/indexer.Indexer/CountBeaconBadBlock"
	Indexer_ListUniqueBeaconBadBlockValues_FullMethodName      = "/indexer.Indexer/ListUniqueBeaconBadBlockValues"
	Indexer_CreateBeaconBadBlob_FullMethodName                 = "/indexer.Indexer/CreateBeaconBadBlob"
	Indexer_ListBeaconBadBlob_FullMethodName                   = "/indexer.Indexer/ListBeaconBadBlob"
	Indexer_CountBeaconBadBlob_FullMethodName                  = "/indexer.Indexer/CountBeaconBadBlob"
	Indexer_ListUniqueBeaconBadBlobValues_FullMethodName       = "/indexer.Indexer/ListUniqueBeaconBadBlobValues"
	Indexer_CreateExecutionBlockTrace_FullMethodName           = "/indexer.Indexer/CreateExecutionBlockTrace"
	Indexer_ListExecutionBlockTrace_FullMethodName             = "/indexer.Indexer/ListExecutionBlockTrace"
	Indexer_CountExecutionBlockTrace_FullMethodName            = "/indexer.Indexer/CountExecutionBlockTrace"
	Indexer_ListUniqueExecutionBlockTraceValues_FullMethodName = "/indexer.Indexer/ListUniqueExecutionBlockTraceValues"
	Indexer_CreateExecutionBadBlock_FullMethodName             = "/indexer.Indexer/CreateExecutionBadBlock"
	Indexer_ListExecutionBadBlock_FullMethodName               = "/indexer.Indexer/ListExecutionBadBlock"
	Indexer_CountExecutionBadBlock_FullMethodName              = "/indexer.Indexer/CountExecutionBadBlock"
	Indexer_ListUniqueExecutionBadBlockValues_FullMethodName   = "/indexer.Indexer/ListUniqueExecutionBadBlockValues"
)

// IndexerClient is the client API for Indexer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexerClient interface {
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	GetStorageHandshakeToken(ctx context.Context, in *GetStorageHandshakeTokenRequest, opts ...grpc.CallOption) (*GetStorageHandshakeTokenResponse, error)
	// BeaconState
	CreateBeaconState(ctx context.Context, in *CreateBeaconStateRequest, opts ...grpc.CallOption) (*CreateBeaconStateResponse, error)
	ListBeaconState(ctx context.Context, in *ListBeaconStateRequest, opts ...grpc.CallOption) (*ListBeaconStateResponse, error)
	CountBeaconState(ctx context.Context, in *CountBeaconStateRequest, opts ...grpc.CallOption) (*CountBeaconStateResponse, error)
	ListUniqueBeaconStateValues(ctx context.Context, in *ListUniqueBeaconStateValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconStateValuesResponse, error)
	// BeaconBlock
	CreateBeaconBlock(ctx context.Context, in *CreateBeaconBlockRequest, opts ...grpc.CallOption) (*CreateBeaconBlockResponse, error)
	ListBeaconBlock(ctx context.Context, in *ListBeaconBlockRequest, opts ...grpc.CallOption) (*ListBeaconBlockResponse, error)
	CountBeaconBlock(ctx context.Context, in *CountBeaconBlockRequest, opts ...grpc.CallOption) (*CountBeaconBlockResponse, error)
	ListUniqueBeaconBlockValues(ctx context.Context, in *ListUniqueBeaconBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBlockValuesResponse, error)
	// BeaconBadBlock
	CreateBeaconBadBlock(ctx context.Context, in *CreateBeaconBadBlockRequest, opts ...grpc.CallOption) (*CreateBeaconBadBlockResponse, error)
	ListBeaconBadBlock(ctx context.Context, in *ListBeaconBadBlockRequest, opts ...grpc.CallOption) (*ListBeaconBadBlockResponse, error)
	CountBeaconBadBlock(ctx context.Context, in *CountBeaconBadBlockRequest, opts ...grpc.CallOption) (*CountBeaconBadBlockResponse, error)
	ListUniqueBeaconBadBlockValues(ctx context.Context, in *ListUniqueBeaconBadBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBadBlockValuesResponse, error)
	// BeaconBadBlob
	CreateBeaconBadBlob(ctx context.Context, in *CreateBeaconBadBlobRequest, opts ...grpc.CallOption) (*CreateBeaconBadBlobResponse, error)
	ListBeaconBadBlob(ctx context.Context, in *ListBeaconBadBlobRequest, opts ...grpc.CallOption) (*ListBeaconBadBlobResponse, error)
	CountBeaconBadBlob(ctx context.Context, in *CountBeaconBadBlobRequest, opts ...grpc.CallOption) (*CountBeaconBadBlobResponse, error)
	ListUniqueBeaconBadBlobValues(ctx context.Context, in *ListUniqueBeaconBadBlobValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBadBlobValuesResponse, error)
	// ExecutionBlockTrace
	CreateExecutionBlockTrace(ctx context.Context, in *CreateExecutionBlockTraceRequest, opts ...grpc.CallOption) (*CreateExecutionBlockTraceResponse, error)
	ListExecutionBlockTrace(ctx context.Context, in *ListExecutionBlockTraceRequest, opts ...grpc.CallOption) (*ListExecutionBlockTraceResponse, error)
	CountExecutionBlockTrace(ctx context.Context, in *CountExecutionBlockTraceRequest, opts ...grpc.CallOption) (*CountExecutionBlockTraceResponse, error)
	ListUniqueExecutionBlockTraceValues(ctx context.Context, in *ListUniqueExecutionBlockTraceValuesRequest, opts ...grpc.CallOption) (*ListUniqueExecutionBlockTraceValuesResponse, error)
	// ExecutionBadBlock
	CreateExecutionBadBlock(ctx context.Context, in *CreateExecutionBadBlockRequest, opts ...grpc.CallOption) (*CreateExecutionBadBlockResponse, error)
	ListExecutionBadBlock(ctx context.Context, in *ListExecutionBadBlockRequest, opts ...grpc.CallOption) (*ListExecutionBadBlockResponse, error)
	CountExecutionBadBlock(ctx context.Context, in *CountExecutionBadBlockRequest, opts ...grpc.CallOption) (*CountExecutionBadBlockResponse, error)
	ListUniqueExecutionBadBlockValues(ctx context.Context, in *ListUniqueExecutionBadBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueExecutionBadBlockValuesResponse, error)
}

type indexerClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerClient(cc grpc.ClientConnInterface) IndexerClient {
	return &indexerClient{cc}
}

func (c *indexerClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, Indexer_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) GetStorageHandshakeToken(ctx context.Context, in *GetStorageHandshakeTokenRequest, opts ...grpc.CallOption) (*GetStorageHandshakeTokenResponse, error) {
	out := new(GetStorageHandshakeTokenResponse)
	err := c.cc.Invoke(ctx, Indexer_GetStorageHandshakeToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CreateBeaconState(ctx context.Context, in *CreateBeaconStateRequest, opts ...grpc.CallOption) (*CreateBeaconStateResponse, error) {
	out := new(CreateBeaconStateResponse)
	err := c.cc.Invoke(ctx, Indexer_CreateBeaconState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListBeaconState(ctx context.Context, in *ListBeaconStateRequest, opts ...grpc.CallOption) (*ListBeaconStateResponse, error) {
	out := new(ListBeaconStateResponse)
	err := c.cc.Invoke(ctx, Indexer_ListBeaconState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CountBeaconState(ctx context.Context, in *CountBeaconStateRequest, opts ...grpc.CallOption) (*CountBeaconStateResponse, error) {
	out := new(CountBeaconStateResponse)
	err := c.cc.Invoke(ctx, Indexer_CountBeaconState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListUniqueBeaconStateValues(ctx context.Context, in *ListUniqueBeaconStateValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconStateValuesResponse, error) {
	out := new(ListUniqueBeaconStateValuesResponse)
	err := c.cc.Invoke(ctx, Indexer_ListUniqueBeaconStateValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CreateBeaconBlock(ctx context.Context, in *CreateBeaconBlockRequest, opts ...grpc.CallOption) (*CreateBeaconBlockResponse, error) {
	out := new(CreateBeaconBlockResponse)
	err := c.cc.Invoke(ctx, Indexer_CreateBeaconBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListBeaconBlock(ctx context.Context, in *ListBeaconBlockRequest, opts ...grpc.CallOption) (*ListBeaconBlockResponse, error) {
	out := new(ListBeaconBlockResponse)
	err := c.cc.Invoke(ctx, Indexer_ListBeaconBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CountBeaconBlock(ctx context.Context, in *CountBeaconBlockRequest, opts ...grpc.CallOption) (*CountBeaconBlockResponse, error) {
	out := new(CountBeaconBlockResponse)
	err := c.cc.Invoke(ctx, Indexer_CountBeaconBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListUniqueBeaconBlockValues(ctx context.Context, in *ListUniqueBeaconBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBlockValuesResponse, error) {
	out := new(ListUniqueBeaconBlockValuesResponse)
	err := c.cc.Invoke(ctx, Indexer_ListUniqueBeaconBlockValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CreateBeaconBadBlock(ctx context.Context, in *CreateBeaconBadBlockRequest, opts ...grpc.CallOption) (*CreateBeaconBadBlockResponse, error) {
	out := new(CreateBeaconBadBlockResponse)
	err := c.cc.Invoke(ctx, Indexer_CreateBeaconBadBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListBeaconBadBlock(ctx context.Context, in *ListBeaconBadBlockRequest, opts ...grpc.CallOption) (*ListBeaconBadBlockResponse, error) {
	out := new(ListBeaconBadBlockResponse)
	err := c.cc.Invoke(ctx, Indexer_ListBeaconBadBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CountBeaconBadBlock(ctx context.Context, in *CountBeaconBadBlockRequest, opts ...grpc.CallOption) (*CountBeaconBadBlockResponse, error) {
	out := new(CountBeaconBadBlockResponse)
	err := c.cc.Invoke(ctx, Indexer_CountBeaconBadBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListUniqueBeaconBadBlockValues(ctx context.Context, in *ListUniqueBeaconBadBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBadBlockValuesResponse, error) {
	out := new(ListUniqueBeaconBadBlockValuesResponse)
	err := c.cc.Invoke(ctx, Indexer_ListUniqueBeaconBadBlockValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CreateBeaconBadBlob(ctx context.Context, in *CreateBeaconBadBlobRequest, opts ...grpc.CallOption) (*CreateBeaconBadBlobResponse, error) {
	out := new(CreateBeaconBadBlobResponse)
	err := c.cc.Invoke(ctx, Indexer_CreateBeaconBadBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListBeaconBadBlob(ctx context.Context, in *ListBeaconBadBlobRequest, opts ...grpc.CallOption) (*ListBeaconBadBlobResponse, error) {
	out := new(ListBeaconBadBlobResponse)
	err := c.cc.Invoke(ctx, Indexer_ListBeaconBadBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CountBeaconBadBlob(ctx context.Context, in *CountBeaconBadBlobRequest, opts ...grpc.CallOption) (*CountBeaconBadBlobResponse, error) {
	out := new(CountBeaconBadBlobResponse)
	err := c.cc.Invoke(ctx, Indexer_CountBeaconBadBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListUniqueBeaconBadBlobValues(ctx context.Context, in *ListUniqueBeaconBadBlobValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBadBlobValuesResponse, error) {
	out := new(ListUniqueBeaconBadBlobValuesResponse)
	err := c.cc.Invoke(ctx, Indexer_ListUniqueBeaconBadBlobValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CreateExecutionBlockTrace(ctx context.Context, in *CreateExecutionBlockTraceRequest, opts ...grpc.CallOption) (*CreateExecutionBlockTraceResponse, error) {
	out := new(CreateExecutionBlockTraceResponse)
	err := c.cc.Invoke(ctx, Indexer_CreateExecutionBlockTrace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListExecutionBlockTrace(ctx context.Context, in *ListExecutionBlockTraceRequest, opts ...grpc.CallOption) (*ListExecutionBlockTraceResponse, error) {
	out := new(ListExecutionBlockTraceResponse)
	err := c.cc.Invoke(ctx, Indexer_ListExecutionBlockTrace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CountExecutionBlockTrace(ctx context.Context, in *CountExecutionBlockTraceRequest, opts ...grpc.CallOption) (*CountExecutionBlockTraceResponse, error) {
	out := new(CountExecutionBlockTraceResponse)
	err := c.cc.Invoke(ctx, Indexer_CountExecutionBlockTrace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListUniqueExecutionBlockTraceValues(ctx context.Context, in *ListUniqueExecutionBlockTraceValuesRequest, opts ...grpc.CallOption) (*ListUniqueExecutionBlockTraceValuesResponse, error) {
	out := new(ListUniqueExecutionBlockTraceValuesResponse)
	err := c.cc.Invoke(ctx, Indexer_ListUniqueExecutionBlockTraceValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CreateExecutionBadBlock(ctx context.Context, in *CreateExecutionBadBlockRequest, opts ...grpc.CallOption) (*CreateExecutionBadBlockResponse, error) {
	out := new(CreateExecutionBadBlockResponse)
	err := c.cc.Invoke(ctx, Indexer_CreateExecutionBadBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListExecutionBadBlock(ctx context.Context, in *ListExecutionBadBlockRequest, opts ...grpc.CallOption) (*ListExecutionBadBlockResponse, error) {
	out := new(ListExecutionBadBlockResponse)
	err := c.cc.Invoke(ctx, Indexer_ListExecutionBadBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) CountExecutionBadBlock(ctx context.Context, in *CountExecutionBadBlockRequest, opts ...grpc.CallOption) (*CountExecutionBadBlockResponse, error) {
	out := new(CountExecutionBadBlockResponse)
	err := c.cc.Invoke(ctx, Indexer_CountExecutionBadBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerClient) ListUniqueExecutionBadBlockValues(ctx context.Context, in *ListUniqueExecutionBadBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueExecutionBadBlockValuesResponse, error) {
	out := new(ListUniqueExecutionBadBlockValuesResponse)
	err := c.cc.Invoke(ctx, Indexer_ListUniqueExecutionBadBlockValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexerServer is the server API for Indexer service.
// All implementations must embed UnimplementedIndexerServer
// for forward compatibility
type IndexerServer interface {
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	GetStorageHandshakeToken(context.Context, *GetStorageHandshakeTokenRequest) (*GetStorageHandshakeTokenResponse, error)
	// BeaconState
	CreateBeaconState(context.Context, *CreateBeaconStateRequest) (*CreateBeaconStateResponse, error)
	ListBeaconState(context.Context, *ListBeaconStateRequest) (*ListBeaconStateResponse, error)
	CountBeaconState(context.Context, *CountBeaconStateRequest) (*CountBeaconStateResponse, error)
	ListUniqueBeaconStateValues(context.Context, *ListUniqueBeaconStateValuesRequest) (*ListUniqueBeaconStateValuesResponse, error)
	// BeaconBlock
	CreateBeaconBlock(context.Context, *CreateBeaconBlockRequest) (*CreateBeaconBlockResponse, error)
	ListBeaconBlock(context.Context, *ListBeaconBlockRequest) (*ListBeaconBlockResponse, error)
	CountBeaconBlock(context.Context, *CountBeaconBlockRequest) (*CountBeaconBlockResponse, error)
	ListUniqueBeaconBlockValues(context.Context, *ListUniqueBeaconBlockValuesRequest) (*ListUniqueBeaconBlockValuesResponse, error)
	// BeaconBadBlock
	CreateBeaconBadBlock(context.Context, *CreateBeaconBadBlockRequest) (*CreateBeaconBadBlockResponse, error)
	ListBeaconBadBlock(context.Context, *ListBeaconBadBlockRequest) (*ListBeaconBadBlockResponse, error)
	CountBeaconBadBlock(context.Context, *CountBeaconBadBlockRequest) (*CountBeaconBadBlockResponse, error)
	ListUniqueBeaconBadBlockValues(context.Context, *ListUniqueBeaconBadBlockValuesRequest) (*ListUniqueBeaconBadBlockValuesResponse, error)
	// BeaconBadBlob
	CreateBeaconBadBlob(context.Context, *CreateBeaconBadBlobRequest) (*CreateBeaconBadBlobResponse, error)
	ListBeaconBadBlob(context.Context, *ListBeaconBadBlobRequest) (*ListBeaconBadBlobResponse, error)
	CountBeaconBadBlob(context.Context, *CountBeaconBadBlobRequest) (*CountBeaconBadBlobResponse, error)
	ListUniqueBeaconBadBlobValues(context.Context, *ListUniqueBeaconBadBlobValuesRequest) (*ListUniqueBeaconBadBlobValuesResponse, error)
	// ExecutionBlockTrace
	CreateExecutionBlockTrace(context.Context, *CreateExecutionBlockTraceRequest) (*CreateExecutionBlockTraceResponse, error)
	ListExecutionBlockTrace(context.Context, *ListExecutionBlockTraceRequest) (*ListExecutionBlockTraceResponse, error)
	CountExecutionBlockTrace(context.Context, *CountExecutionBlockTraceRequest) (*CountExecutionBlockTraceResponse, error)
	ListUniqueExecutionBlockTraceValues(context.Context, *ListUniqueExecutionBlockTraceValuesRequest) (*ListUniqueExecutionBlockTraceValuesResponse, error)
	// ExecutionBadBlock
	CreateExecutionBadBlock(context.Context, *CreateExecutionBadBlockRequest) (*CreateExecutionBadBlockResponse, error)
	ListExecutionBadBlock(context.Context, *ListExecutionBadBlockRequest) (*ListExecutionBadBlockResponse, error)
	CountExecutionBadBlock(context.Context, *CountExecutionBadBlockRequest) (*CountExecutionBadBlockResponse, error)
	ListUniqueExecutionBadBlockValues(context.Context, *ListUniqueExecutionBadBlockValuesRequest) (*ListUniqueExecutionBadBlockValuesResponse, error)
	mustEmbedUnimplementedIndexerServer()
}

// UnimplementedIndexerServer must be embedded to have forward compatible implementations.
type UnimplementedIndexerServer struct {
}

func (UnimplementedIndexerServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedIndexerServer) GetStorageHandshakeToken(context.Context, *GetStorageHandshakeTokenRequest) (*GetStorageHandshakeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageHandshakeToken not implemented")
}
func (UnimplementedIndexerServer) CreateBeaconState(context.Context, *CreateBeaconStateRequest) (*CreateBeaconStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeaconState not implemented")
}
func (UnimplementedIndexerServer) ListBeaconState(context.Context, *ListBeaconStateRequest) (*ListBeaconStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeaconState not implemented")
}
func (UnimplementedIndexerServer) CountBeaconState(context.Context, *CountBeaconStateRequest) (*CountBeaconStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeaconState not implemented")
}
func (UnimplementedIndexerServer) ListUniqueBeaconStateValues(context.Context, *ListUniqueBeaconStateValuesRequest) (*ListUniqueBeaconStateValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueBeaconStateValues not implemented")
}
func (UnimplementedIndexerServer) CreateBeaconBlock(context.Context, *CreateBeaconBlockRequest) (*CreateBeaconBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeaconBlock not implemented")
}
func (UnimplementedIndexerServer) ListBeaconBlock(context.Context, *ListBeaconBlockRequest) (*ListBeaconBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeaconBlock not implemented")
}
func (UnimplementedIndexerServer) CountBeaconBlock(context.Context, *CountBeaconBlockRequest) (*CountBeaconBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeaconBlock not implemented")
}
func (UnimplementedIndexerServer) ListUniqueBeaconBlockValues(context.Context, *ListUniqueBeaconBlockValuesRequest) (*ListUniqueBeaconBlockValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueBeaconBlockValues not implemented")
}
func (UnimplementedIndexerServer) CreateBeaconBadBlock(context.Context, *CreateBeaconBadBlockRequest) (*CreateBeaconBadBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeaconBadBlock not implemented")
}
func (UnimplementedIndexerServer) ListBeaconBadBlock(context.Context, *ListBeaconBadBlockRequest) (*ListBeaconBadBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeaconBadBlock not implemented")
}
func (UnimplementedIndexerServer) CountBeaconBadBlock(context.Context, *CountBeaconBadBlockRequest) (*CountBeaconBadBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeaconBadBlock not implemented")
}
func (UnimplementedIndexerServer) ListUniqueBeaconBadBlockValues(context.Context, *ListUniqueBeaconBadBlockValuesRequest) (*ListUniqueBeaconBadBlockValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueBeaconBadBlockValues not implemented")
}
func (UnimplementedIndexerServer) CreateBeaconBadBlob(context.Context, *CreateBeaconBadBlobRequest) (*CreateBeaconBadBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeaconBadBlob not implemented")
}
func (UnimplementedIndexerServer) ListBeaconBadBlob(context.Context, *ListBeaconBadBlobRequest) (*ListBeaconBadBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeaconBadBlob not implemented")
}
func (UnimplementedIndexerServer) CountBeaconBadBlob(context.Context, *CountBeaconBadBlobRequest) (*CountBeaconBadBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeaconBadBlob not implemented")
}
func (UnimplementedIndexerServer) ListUniqueBeaconBadBlobValues(context.Context, *ListUniqueBeaconBadBlobValuesRequest) (*ListUniqueBeaconBadBlobValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueBeaconBadBlobValues not implemented")
}
func (UnimplementedIndexerServer) CreateExecutionBlockTrace(context.Context, *CreateExecutionBlockTraceRequest) (*CreateExecutionBlockTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExecutionBlockTrace not implemented")
}
func (UnimplementedIndexerServer) ListExecutionBlockTrace(context.Context, *ListExecutionBlockTraceRequest) (*ListExecutionBlockTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionBlockTrace not implemented")
}
func (UnimplementedIndexerServer) CountExecutionBlockTrace(context.Context, *CountExecutionBlockTraceRequest) (*CountExecutionBlockTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountExecutionBlockTrace not implemented")
}
func (UnimplementedIndexerServer) ListUniqueExecutionBlockTraceValues(context.Context, *ListUniqueExecutionBlockTraceValuesRequest) (*ListUniqueExecutionBlockTraceValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueExecutionBlockTraceValues not implemented")
}
func (UnimplementedIndexerServer) CreateExecutionBadBlock(context.Context, *CreateExecutionBadBlockRequest) (*CreateExecutionBadBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExecutionBadBlock not implemented")
}
func (UnimplementedIndexerServer) ListExecutionBadBlock(context.Context, *ListExecutionBadBlockRequest) (*ListExecutionBadBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionBadBlock not implemented")
}
func (UnimplementedIndexerServer) CountExecutionBadBlock(context.Context, *CountExecutionBadBlockRequest) (*CountExecutionBadBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountExecutionBadBlock not implemented")
}
func (UnimplementedIndexerServer) ListUniqueExecutionBadBlockValues(context.Context, *ListUniqueExecutionBadBlockValuesRequest) (*ListUniqueExecutionBadBlockValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueExecutionBadBlockValues not implemented")
}
func (UnimplementedIndexerServer) mustEmbedUnimplementedIndexerServer() {}

// UnsafeIndexerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerServer will
// result in compilation errors.
type UnsafeIndexerServer interface {
	mustEmbedUnimplementedIndexerServer()
}

func RegisterIndexerServer(s grpc.ServiceRegistrar, srv IndexerServer) {
	s.RegisterService(&Indexer_ServiceDesc, srv)
}

func _Indexer_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_GetStorageHandshakeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageHandshakeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).GetStorageHandshakeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_GetStorageHandshakeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).GetStorageHandshakeToken(ctx, req.(*GetStorageHandshakeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CreateBeaconState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeaconStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CreateBeaconState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CreateBeaconState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CreateBeaconState(ctx, req.(*CreateBeaconStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListBeaconState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeaconStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListBeaconState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListBeaconState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListBeaconState(ctx, req.(*ListBeaconStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CountBeaconState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBeaconStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CountBeaconState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CountBeaconState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CountBeaconState(ctx, req.(*CountBeaconStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListUniqueBeaconStateValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueBeaconStateValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListUniqueBeaconStateValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListUniqueBeaconStateValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListUniqueBeaconStateValues(ctx, req.(*ListUniqueBeaconStateValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CreateBeaconBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeaconBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CreateBeaconBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CreateBeaconBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CreateBeaconBlock(ctx, req.(*CreateBeaconBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListBeaconBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeaconBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListBeaconBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListBeaconBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListBeaconBlock(ctx, req.(*ListBeaconBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CountBeaconBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBeaconBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CountBeaconBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CountBeaconBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CountBeaconBlock(ctx, req.(*CountBeaconBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListUniqueBeaconBlockValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueBeaconBlockValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListUniqueBeaconBlockValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListUniqueBeaconBlockValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListUniqueBeaconBlockValues(ctx, req.(*ListUniqueBeaconBlockValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CreateBeaconBadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeaconBadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CreateBeaconBadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CreateBeaconBadBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CreateBeaconBadBlock(ctx, req.(*CreateBeaconBadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListBeaconBadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeaconBadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListBeaconBadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListBeaconBadBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListBeaconBadBlock(ctx, req.(*ListBeaconBadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CountBeaconBadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBeaconBadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CountBeaconBadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CountBeaconBadBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CountBeaconBadBlock(ctx, req.(*CountBeaconBadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListUniqueBeaconBadBlockValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueBeaconBadBlockValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListUniqueBeaconBadBlockValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListUniqueBeaconBadBlockValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListUniqueBeaconBadBlockValues(ctx, req.(*ListUniqueBeaconBadBlockValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CreateBeaconBadBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeaconBadBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CreateBeaconBadBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CreateBeaconBadBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CreateBeaconBadBlob(ctx, req.(*CreateBeaconBadBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListBeaconBadBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeaconBadBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListBeaconBadBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListBeaconBadBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListBeaconBadBlob(ctx, req.(*ListBeaconBadBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CountBeaconBadBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBeaconBadBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CountBeaconBadBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CountBeaconBadBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CountBeaconBadBlob(ctx, req.(*CountBeaconBadBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListUniqueBeaconBadBlobValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueBeaconBadBlobValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListUniqueBeaconBadBlobValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListUniqueBeaconBadBlobValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListUniqueBeaconBadBlobValues(ctx, req.(*ListUniqueBeaconBadBlobValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CreateExecutionBlockTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExecutionBlockTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CreateExecutionBlockTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CreateExecutionBlockTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CreateExecutionBlockTrace(ctx, req.(*CreateExecutionBlockTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListExecutionBlockTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExecutionBlockTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListExecutionBlockTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListExecutionBlockTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListExecutionBlockTrace(ctx, req.(*ListExecutionBlockTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CountExecutionBlockTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountExecutionBlockTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CountExecutionBlockTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CountExecutionBlockTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CountExecutionBlockTrace(ctx, req.(*CountExecutionBlockTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListUniqueExecutionBlockTraceValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueExecutionBlockTraceValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListUniqueExecutionBlockTraceValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListUniqueExecutionBlockTraceValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListUniqueExecutionBlockTraceValues(ctx, req.(*ListUniqueExecutionBlockTraceValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CreateExecutionBadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExecutionBadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CreateExecutionBadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CreateExecutionBadBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CreateExecutionBadBlock(ctx, req.(*CreateExecutionBadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListExecutionBadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExecutionBadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListExecutionBadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListExecutionBadBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListExecutionBadBlock(ctx, req.(*ListExecutionBadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_CountExecutionBadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountExecutionBadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).CountExecutionBadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_CountExecutionBadBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).CountExecutionBadBlock(ctx, req.(*CountExecutionBadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Indexer_ListUniqueExecutionBadBlockValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueExecutionBadBlockValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServer).ListUniqueExecutionBadBlockValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Indexer_ListUniqueExecutionBadBlockValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServer).ListUniqueExecutionBadBlockValues(ctx, req.(*ListUniqueExecutionBadBlockValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Indexer_ServiceDesc is the grpc.ServiceDesc for Indexer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Indexer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indexer.Indexer",
	HandlerType: (*IndexerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Indexer_GetConfig_Handler,
		},
		{
			MethodName: "GetStorageHandshakeToken",
			Handler:    _Indexer_GetStorageHandshakeToken_Handler,
		},
		{
			MethodName: "CreateBeaconState",
			Handler:    _Indexer_CreateBeaconState_Handler,
		},
		{
			MethodName: "ListBeaconState",
			Handler:    _Indexer_ListBeaconState_Handler,
		},
		{
			MethodName: "CountBeaconState",
			Handler:    _Indexer_CountBeaconState_Handler,
		},
		{
			MethodName: "ListUniqueBeaconStateValues",
			Handler:    _Indexer_ListUniqueBeaconStateValues_Handler,
		},
		{
			MethodName: "CreateBeaconBlock",
			Handler:    _Indexer_CreateBeaconBlock_Handler,
		},
		{
			MethodName: "ListBeaconBlock",
			Handler:    _Indexer_ListBeaconBlock_Handler,
		},
		{
			MethodName: "CountBeaconBlock",
			Handler:    _Indexer_CountBeaconBlock_Handler,
		},
		{
			MethodName: "ListUniqueBeaconBlockValues",
			Handler:    _Indexer_ListUniqueBeaconBlockValues_Handler,
		},
		{
			MethodName: "CreateBeaconBadBlock",
			Handler:    _Indexer_CreateBeaconBadBlock_Handler,
		},
		{
			MethodName: "ListBeaconBadBlock",
			Handler:    _Indexer_ListBeaconBadBlock_Handler,
		},
		{
			MethodName: "CountBeaconBadBlock",
			Handler:    _Indexer_CountBeaconBadBlock_Handler,
		},
		{
			MethodName: "ListUniqueBeaconBadBlockValues",
			Handler:    _Indexer_ListUniqueBeaconBadBlockValues_Handler,
		},
		{
			MethodName: "CreateBeaconBadBlob",
			Handler:    _Indexer_CreateBeaconBadBlob_Handler,
		},
		{
			MethodName: "ListBeaconBadBlob",
			Handler:    _Indexer_ListBeaconBadBlob_Handler,
		},
		{
			MethodName: "CountBeaconBadBlob",
			Handler:    _Indexer_CountBeaconBadBlob_Handler,
		},
		{
			MethodName: "ListUniqueBeaconBadBlobValues",
			Handler:    _Indexer_ListUniqueBeaconBadBlobValues_Handler,
		},
		{
			MethodName: "CreateExecutionBlockTrace",
			Handler:    _Indexer_CreateExecutionBlockTrace_Handler,
		},
		{
			MethodName: "ListExecutionBlockTrace",
			Handler:    _Indexer_ListExecutionBlockTrace_Handler,
		},
		{
			MethodName: "CountExecutionBlockTrace",
			Handler:    _Indexer_CountExecutionBlockTrace_Handler,
		},
		{
			MethodName: "ListUniqueExecutionBlockTraceValues",
			Handler:    _Indexer_ListUniqueExecutionBlockTraceValues_Handler,
		},
		{
			MethodName: "CreateExecutionBadBlock",
			Handler:    _Indexer_CreateExecutionBadBlock_Handler,
		},
		{
			MethodName: "ListExecutionBadBlock",
			Handler:    _Indexer_ListExecutionBadBlock_Handler,
		},
		{
			MethodName: "CountExecutionBadBlock",
			Handler:    _Indexer_CountExecutionBadBlock_Handler,
		},
		{
			MethodName: "ListUniqueExecutionBadBlockValues",
			Handler:    _Indexer_ListUniqueExecutionBadBlockValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indexer/indexer.proto",
}
