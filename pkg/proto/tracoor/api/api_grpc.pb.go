// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	API_ListBeaconState_FullMethodName                     = "/api.API/ListBeaconState"
	API_CountBeaconState_FullMethodName                    = "/api.API/CountBeaconState"
	API_ListUniqueBeaconStateValues_FullMethodName         = "/api.API/ListUniqueBeaconStateValues"
	API_ListBeaconBlock_FullMethodName                     = "/api.API/ListBeaconBlock"
	API_CountBeaconBlock_FullMethodName                    = "/api.API/CountBeaconBlock"
	API_ListUniqueBeaconBlockValues_FullMethodName         = "/api.API/ListUniqueBeaconBlockValues"
	API_ListBeaconBadBlock_FullMethodName                  = "/api.API/ListBeaconBadBlock"
	API_CountBeaconBadBlock_FullMethodName                 = "/api.API/CountBeaconBadBlock"
	API_ListUniqueBeaconBadBlockValues_FullMethodName      = "/api.API/ListUniqueBeaconBadBlockValues"
	API_ListBeaconBadBlob_FullMethodName                   = "/api.API/ListBeaconBadBlob"
	API_CountBeaconBadBlob_FullMethodName                  = "/api.API/CountBeaconBadBlob"
	API_ListUniqueBeaconBadBlobValues_FullMethodName       = "/api.API/ListUniqueBeaconBadBlobValues"
	API_ListExecutionBlockTrace_FullMethodName             = "/api.API/ListExecutionBlockTrace"
	API_CountExecutionBlockTrace_FullMethodName            = "/api.API/CountExecutionBlockTrace"
	API_ListUniqueExecutionBlockTraceValues_FullMethodName = "/api.API/ListUniqueExecutionBlockTraceValues"
	API_ListExecutionBadBlock_FullMethodName               = "/api.API/ListExecutionBadBlock"
	API_CountExecutionBadBlock_FullMethodName              = "/api.API/CountExecutionBadBlock"
	API_ListUniqueExecutionBadBlockValues_FullMethodName   = "/api.API/ListUniqueExecutionBadBlockValues"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	ListBeaconState(ctx context.Context, in *ListBeaconStateRequest, opts ...grpc.CallOption) (*ListBeaconStateResponse, error)
	CountBeaconState(ctx context.Context, in *CountBeaconStateRequest, opts ...grpc.CallOption) (*CountBeaconStateResponse, error)
	ListUniqueBeaconStateValues(ctx context.Context, in *ListUniqueBeaconStateValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconStateValuesResponse, error)
	ListBeaconBlock(ctx context.Context, in *ListBeaconBlockRequest, opts ...grpc.CallOption) (*ListBeaconBlockResponse, error)
	CountBeaconBlock(ctx context.Context, in *CountBeaconBlockRequest, opts ...grpc.CallOption) (*CountBeaconBlockResponse, error)
	ListUniqueBeaconBlockValues(ctx context.Context, in *ListUniqueBeaconBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBlockValuesResponse, error)
	ListBeaconBadBlock(ctx context.Context, in *ListBeaconBadBlockRequest, opts ...grpc.CallOption) (*ListBeaconBadBlockResponse, error)
	CountBeaconBadBlock(ctx context.Context, in *CountBeaconBadBlockRequest, opts ...grpc.CallOption) (*CountBeaconBadBlockResponse, error)
	ListUniqueBeaconBadBlockValues(ctx context.Context, in *ListUniqueBeaconBadBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBadBlockValuesResponse, error)
	ListBeaconBadBlob(ctx context.Context, in *ListBeaconBadBlobRequest, opts ...grpc.CallOption) (*ListBeaconBadBlobResponse, error)
	CountBeaconBadBlob(ctx context.Context, in *CountBeaconBadBlobRequest, opts ...grpc.CallOption) (*CountBeaconBadBlobResponse, error)
	ListUniqueBeaconBadBlobValues(ctx context.Context, in *ListUniqueBeaconBadBlobValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBadBlobValuesResponse, error)
	ListExecutionBlockTrace(ctx context.Context, in *ListExecutionBlockTraceRequest, opts ...grpc.CallOption) (*ListExecutionBlockTraceResponse, error)
	CountExecutionBlockTrace(ctx context.Context, in *CountExecutionBlockTraceRequest, opts ...grpc.CallOption) (*CountExecutionBlockTraceResponse, error)
	ListUniqueExecutionBlockTraceValues(ctx context.Context, in *ListUniqueExecutionBlockTraceValuesRequest, opts ...grpc.CallOption) (*ListUniqueExecutionBlockTraceValuesResponse, error)
	ListExecutionBadBlock(ctx context.Context, in *ListExecutionBadBlockRequest, opts ...grpc.CallOption) (*ListExecutionBadBlockResponse, error)
	CountExecutionBadBlock(ctx context.Context, in *CountExecutionBadBlockRequest, opts ...grpc.CallOption) (*CountExecutionBadBlockResponse, error)
	ListUniqueExecutionBadBlockValues(ctx context.Context, in *ListUniqueExecutionBadBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueExecutionBadBlockValuesResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) ListBeaconState(ctx context.Context, in *ListBeaconStateRequest, opts ...grpc.CallOption) (*ListBeaconStateResponse, error) {
	out := new(ListBeaconStateResponse)
	err := c.cc.Invoke(ctx, API_ListBeaconState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CountBeaconState(ctx context.Context, in *CountBeaconStateRequest, opts ...grpc.CallOption) (*CountBeaconStateResponse, error) {
	out := new(CountBeaconStateResponse)
	err := c.cc.Invoke(ctx, API_CountBeaconState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListUniqueBeaconStateValues(ctx context.Context, in *ListUniqueBeaconStateValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconStateValuesResponse, error) {
	out := new(ListUniqueBeaconStateValuesResponse)
	err := c.cc.Invoke(ctx, API_ListUniqueBeaconStateValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListBeaconBlock(ctx context.Context, in *ListBeaconBlockRequest, opts ...grpc.CallOption) (*ListBeaconBlockResponse, error) {
	out := new(ListBeaconBlockResponse)
	err := c.cc.Invoke(ctx, API_ListBeaconBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CountBeaconBlock(ctx context.Context, in *CountBeaconBlockRequest, opts ...grpc.CallOption) (*CountBeaconBlockResponse, error) {
	out := new(CountBeaconBlockResponse)
	err := c.cc.Invoke(ctx, API_CountBeaconBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListUniqueBeaconBlockValues(ctx context.Context, in *ListUniqueBeaconBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBlockValuesResponse, error) {
	out := new(ListUniqueBeaconBlockValuesResponse)
	err := c.cc.Invoke(ctx, API_ListUniqueBeaconBlockValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListBeaconBadBlock(ctx context.Context, in *ListBeaconBadBlockRequest, opts ...grpc.CallOption) (*ListBeaconBadBlockResponse, error) {
	out := new(ListBeaconBadBlockResponse)
	err := c.cc.Invoke(ctx, API_ListBeaconBadBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CountBeaconBadBlock(ctx context.Context, in *CountBeaconBadBlockRequest, opts ...grpc.CallOption) (*CountBeaconBadBlockResponse, error) {
	out := new(CountBeaconBadBlockResponse)
	err := c.cc.Invoke(ctx, API_CountBeaconBadBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListUniqueBeaconBadBlockValues(ctx context.Context, in *ListUniqueBeaconBadBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBadBlockValuesResponse, error) {
	out := new(ListUniqueBeaconBadBlockValuesResponse)
	err := c.cc.Invoke(ctx, API_ListUniqueBeaconBadBlockValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListBeaconBadBlob(ctx context.Context, in *ListBeaconBadBlobRequest, opts ...grpc.CallOption) (*ListBeaconBadBlobResponse, error) {
	out := new(ListBeaconBadBlobResponse)
	err := c.cc.Invoke(ctx, API_ListBeaconBadBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CountBeaconBadBlob(ctx context.Context, in *CountBeaconBadBlobRequest, opts ...grpc.CallOption) (*CountBeaconBadBlobResponse, error) {
	out := new(CountBeaconBadBlobResponse)
	err := c.cc.Invoke(ctx, API_CountBeaconBadBlob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListUniqueBeaconBadBlobValues(ctx context.Context, in *ListUniqueBeaconBadBlobValuesRequest, opts ...grpc.CallOption) (*ListUniqueBeaconBadBlobValuesResponse, error) {
	out := new(ListUniqueBeaconBadBlobValuesResponse)
	err := c.cc.Invoke(ctx, API_ListUniqueBeaconBadBlobValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListExecutionBlockTrace(ctx context.Context, in *ListExecutionBlockTraceRequest, opts ...grpc.CallOption) (*ListExecutionBlockTraceResponse, error) {
	out := new(ListExecutionBlockTraceResponse)
	err := c.cc.Invoke(ctx, API_ListExecutionBlockTrace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CountExecutionBlockTrace(ctx context.Context, in *CountExecutionBlockTraceRequest, opts ...grpc.CallOption) (*CountExecutionBlockTraceResponse, error) {
	out := new(CountExecutionBlockTraceResponse)
	err := c.cc.Invoke(ctx, API_CountExecutionBlockTrace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListUniqueExecutionBlockTraceValues(ctx context.Context, in *ListUniqueExecutionBlockTraceValuesRequest, opts ...grpc.CallOption) (*ListUniqueExecutionBlockTraceValuesResponse, error) {
	out := new(ListUniqueExecutionBlockTraceValuesResponse)
	err := c.cc.Invoke(ctx, API_ListUniqueExecutionBlockTraceValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListExecutionBadBlock(ctx context.Context, in *ListExecutionBadBlockRequest, opts ...grpc.CallOption) (*ListExecutionBadBlockResponse, error) {
	out := new(ListExecutionBadBlockResponse)
	err := c.cc.Invoke(ctx, API_ListExecutionBadBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CountExecutionBadBlock(ctx context.Context, in *CountExecutionBadBlockRequest, opts ...grpc.CallOption) (*CountExecutionBadBlockResponse, error) {
	out := new(CountExecutionBadBlockResponse)
	err := c.cc.Invoke(ctx, API_CountExecutionBadBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListUniqueExecutionBadBlockValues(ctx context.Context, in *ListUniqueExecutionBadBlockValuesRequest, opts ...grpc.CallOption) (*ListUniqueExecutionBadBlockValuesResponse, error) {
	out := new(ListUniqueExecutionBadBlockValuesResponse)
	err := c.cc.Invoke(ctx, API_ListUniqueExecutionBadBlockValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	ListBeaconState(context.Context, *ListBeaconStateRequest) (*ListBeaconStateResponse, error)
	CountBeaconState(context.Context, *CountBeaconStateRequest) (*CountBeaconStateResponse, error)
	ListUniqueBeaconStateValues(context.Context, *ListUniqueBeaconStateValuesRequest) (*ListUniqueBeaconStateValuesResponse, error)
	ListBeaconBlock(context.Context, *ListBeaconBlockRequest) (*ListBeaconBlockResponse, error)
	CountBeaconBlock(context.Context, *CountBeaconBlockRequest) (*CountBeaconBlockResponse, error)
	ListUniqueBeaconBlockValues(context.Context, *ListUniqueBeaconBlockValuesRequest) (*ListUniqueBeaconBlockValuesResponse, error)
	ListBeaconBadBlock(context.Context, *ListBeaconBadBlockRequest) (*ListBeaconBadBlockResponse, error)
	CountBeaconBadBlock(context.Context, *CountBeaconBadBlockRequest) (*CountBeaconBadBlockResponse, error)
	ListUniqueBeaconBadBlockValues(context.Context, *ListUniqueBeaconBadBlockValuesRequest) (*ListUniqueBeaconBadBlockValuesResponse, error)
	ListBeaconBadBlob(context.Context, *ListBeaconBadBlobRequest) (*ListBeaconBadBlobResponse, error)
	CountBeaconBadBlob(context.Context, *CountBeaconBadBlobRequest) (*CountBeaconBadBlobResponse, error)
	ListUniqueBeaconBadBlobValues(context.Context, *ListUniqueBeaconBadBlobValuesRequest) (*ListUniqueBeaconBadBlobValuesResponse, error)
	ListExecutionBlockTrace(context.Context, *ListExecutionBlockTraceRequest) (*ListExecutionBlockTraceResponse, error)
	CountExecutionBlockTrace(context.Context, *CountExecutionBlockTraceRequest) (*CountExecutionBlockTraceResponse, error)
	ListUniqueExecutionBlockTraceValues(context.Context, *ListUniqueExecutionBlockTraceValuesRequest) (*ListUniqueExecutionBlockTraceValuesResponse, error)
	ListExecutionBadBlock(context.Context, *ListExecutionBadBlockRequest) (*ListExecutionBadBlockResponse, error)
	CountExecutionBadBlock(context.Context, *CountExecutionBadBlockRequest) (*CountExecutionBadBlockResponse, error)
	ListUniqueExecutionBadBlockValues(context.Context, *ListUniqueExecutionBadBlockValuesRequest) (*ListUniqueExecutionBadBlockValuesResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) ListBeaconState(context.Context, *ListBeaconStateRequest) (*ListBeaconStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeaconState not implemented")
}
func (UnimplementedAPIServer) CountBeaconState(context.Context, *CountBeaconStateRequest) (*CountBeaconStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeaconState not implemented")
}
func (UnimplementedAPIServer) ListUniqueBeaconStateValues(context.Context, *ListUniqueBeaconStateValuesRequest) (*ListUniqueBeaconStateValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueBeaconStateValues not implemented")
}
func (UnimplementedAPIServer) ListBeaconBlock(context.Context, *ListBeaconBlockRequest) (*ListBeaconBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeaconBlock not implemented")
}
func (UnimplementedAPIServer) CountBeaconBlock(context.Context, *CountBeaconBlockRequest) (*CountBeaconBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeaconBlock not implemented")
}
func (UnimplementedAPIServer) ListUniqueBeaconBlockValues(context.Context, *ListUniqueBeaconBlockValuesRequest) (*ListUniqueBeaconBlockValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueBeaconBlockValues not implemented")
}
func (UnimplementedAPIServer) ListBeaconBadBlock(context.Context, *ListBeaconBadBlockRequest) (*ListBeaconBadBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeaconBadBlock not implemented")
}
func (UnimplementedAPIServer) CountBeaconBadBlock(context.Context, *CountBeaconBadBlockRequest) (*CountBeaconBadBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeaconBadBlock not implemented")
}
func (UnimplementedAPIServer) ListUniqueBeaconBadBlockValues(context.Context, *ListUniqueBeaconBadBlockValuesRequest) (*ListUniqueBeaconBadBlockValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueBeaconBadBlockValues not implemented")
}
func (UnimplementedAPIServer) ListBeaconBadBlob(context.Context, *ListBeaconBadBlobRequest) (*ListBeaconBadBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeaconBadBlob not implemented")
}
func (UnimplementedAPIServer) CountBeaconBadBlob(context.Context, *CountBeaconBadBlobRequest) (*CountBeaconBadBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeaconBadBlob not implemented")
}
func (UnimplementedAPIServer) ListUniqueBeaconBadBlobValues(context.Context, *ListUniqueBeaconBadBlobValuesRequest) (*ListUniqueBeaconBadBlobValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueBeaconBadBlobValues not implemented")
}
func (UnimplementedAPIServer) ListExecutionBlockTrace(context.Context, *ListExecutionBlockTraceRequest) (*ListExecutionBlockTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionBlockTrace not implemented")
}
func (UnimplementedAPIServer) CountExecutionBlockTrace(context.Context, *CountExecutionBlockTraceRequest) (*CountExecutionBlockTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountExecutionBlockTrace not implemented")
}
func (UnimplementedAPIServer) ListUniqueExecutionBlockTraceValues(context.Context, *ListUniqueExecutionBlockTraceValuesRequest) (*ListUniqueExecutionBlockTraceValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueExecutionBlockTraceValues not implemented")
}
func (UnimplementedAPIServer) ListExecutionBadBlock(context.Context, *ListExecutionBadBlockRequest) (*ListExecutionBadBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExecutionBadBlock not implemented")
}
func (UnimplementedAPIServer) CountExecutionBadBlock(context.Context, *CountExecutionBadBlockRequest) (*CountExecutionBadBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountExecutionBadBlock not implemented")
}
func (UnimplementedAPIServer) ListUniqueExecutionBadBlockValues(context.Context, *ListUniqueExecutionBadBlockValuesRequest) (*ListUniqueExecutionBadBlockValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniqueExecutionBadBlockValues not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_ListBeaconState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeaconStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListBeaconState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListBeaconState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListBeaconState(ctx, req.(*ListBeaconStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CountBeaconState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBeaconStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CountBeaconState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CountBeaconState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CountBeaconState(ctx, req.(*CountBeaconStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListUniqueBeaconStateValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueBeaconStateValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListUniqueBeaconStateValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListUniqueBeaconStateValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListUniqueBeaconStateValues(ctx, req.(*ListUniqueBeaconStateValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListBeaconBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeaconBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListBeaconBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListBeaconBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListBeaconBlock(ctx, req.(*ListBeaconBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CountBeaconBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBeaconBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CountBeaconBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CountBeaconBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CountBeaconBlock(ctx, req.(*CountBeaconBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListUniqueBeaconBlockValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueBeaconBlockValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListUniqueBeaconBlockValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListUniqueBeaconBlockValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListUniqueBeaconBlockValues(ctx, req.(*ListUniqueBeaconBlockValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListBeaconBadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeaconBadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListBeaconBadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListBeaconBadBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListBeaconBadBlock(ctx, req.(*ListBeaconBadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CountBeaconBadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBeaconBadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CountBeaconBadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CountBeaconBadBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CountBeaconBadBlock(ctx, req.(*CountBeaconBadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListUniqueBeaconBadBlockValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueBeaconBadBlockValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListUniqueBeaconBadBlockValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListUniqueBeaconBadBlockValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListUniqueBeaconBadBlockValues(ctx, req.(*ListUniqueBeaconBadBlockValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListBeaconBadBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeaconBadBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListBeaconBadBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListBeaconBadBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListBeaconBadBlob(ctx, req.(*ListBeaconBadBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CountBeaconBadBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBeaconBadBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CountBeaconBadBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CountBeaconBadBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CountBeaconBadBlob(ctx, req.(*CountBeaconBadBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListUniqueBeaconBadBlobValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueBeaconBadBlobValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListUniqueBeaconBadBlobValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListUniqueBeaconBadBlobValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListUniqueBeaconBadBlobValues(ctx, req.(*ListUniqueBeaconBadBlobValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListExecutionBlockTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExecutionBlockTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListExecutionBlockTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListExecutionBlockTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListExecutionBlockTrace(ctx, req.(*ListExecutionBlockTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CountExecutionBlockTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountExecutionBlockTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CountExecutionBlockTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CountExecutionBlockTrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CountExecutionBlockTrace(ctx, req.(*CountExecutionBlockTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListUniqueExecutionBlockTraceValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueExecutionBlockTraceValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListUniqueExecutionBlockTraceValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListUniqueExecutionBlockTraceValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListUniqueExecutionBlockTraceValues(ctx, req.(*ListUniqueExecutionBlockTraceValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListExecutionBadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExecutionBadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListExecutionBadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListExecutionBadBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListExecutionBadBlock(ctx, req.(*ListExecutionBadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CountExecutionBadBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountExecutionBadBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CountExecutionBadBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CountExecutionBadBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CountExecutionBadBlock(ctx, req.(*CountExecutionBadBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListUniqueExecutionBadBlockValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniqueExecutionBadBlockValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListUniqueExecutionBadBlockValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_ListUniqueExecutionBadBlockValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListUniqueExecutionBadBlockValues(ctx, req.(*ListUniqueExecutionBadBlockValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBeaconState",
			Handler:    _API_ListBeaconState_Handler,
		},
		{
			MethodName: "CountBeaconState",
			Handler:    _API_CountBeaconState_Handler,
		},
		{
			MethodName: "ListUniqueBeaconStateValues",
			Handler:    _API_ListUniqueBeaconStateValues_Handler,
		},
		{
			MethodName: "ListBeaconBlock",
			Handler:    _API_ListBeaconBlock_Handler,
		},
		{
			MethodName: "CountBeaconBlock",
			Handler:    _API_CountBeaconBlock_Handler,
		},
		{
			MethodName: "ListUniqueBeaconBlockValues",
			Handler:    _API_ListUniqueBeaconBlockValues_Handler,
		},
		{
			MethodName: "ListBeaconBadBlock",
			Handler:    _API_ListBeaconBadBlock_Handler,
		},
		{
			MethodName: "CountBeaconBadBlock",
			Handler:    _API_CountBeaconBadBlock_Handler,
		},
		{
			MethodName: "ListUniqueBeaconBadBlockValues",
			Handler:    _API_ListUniqueBeaconBadBlockValues_Handler,
		},
		{
			MethodName: "ListBeaconBadBlob",
			Handler:    _API_ListBeaconBadBlob_Handler,
		},
		{
			MethodName: "CountBeaconBadBlob",
			Handler:    _API_CountBeaconBadBlob_Handler,
		},
		{
			MethodName: "ListUniqueBeaconBadBlobValues",
			Handler:    _API_ListUniqueBeaconBadBlobValues_Handler,
		},
		{
			MethodName: "ListExecutionBlockTrace",
			Handler:    _API_ListExecutionBlockTrace_Handler,
		},
		{
			MethodName: "CountExecutionBlockTrace",
			Handler:    _API_CountExecutionBlockTrace_Handler,
		},
		{
			MethodName: "ListUniqueExecutionBlockTraceValues",
			Handler:    _API_ListUniqueExecutionBlockTraceValues_Handler,
		},
		{
			MethodName: "ListExecutionBadBlock",
			Handler:    _API_ListExecutionBadBlock_Handler,
		},
		{
			MethodName: "CountExecutionBadBlock",
			Handler:    _API_CountExecutionBadBlock_Handler,
		},
		{
			MethodName: "ListUniqueExecutionBadBlockValues",
			Handler:    _API_ListUniqueExecutionBadBlockValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
